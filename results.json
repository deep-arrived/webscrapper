{
  "home_url": "https://cloud.google.com/blog/topics/threat-intelligence",
  "crawls": [
    {
      "url": "https://cloud.google.com/blog/topics/threat-intelligence",
      "text": "Threat Intelligence | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nFrontline Mandiant investigations, expert analysis, tools and guidance, and in-depth security research.\nThreat Intelligence\nInvestigating FortiManager Zero-Day Exploitation (CVE-2024-47575)\nMandiant collaborated with Fortinet to investigate mass zero-day exploitation of FortiManager appliances.\nBy Mandiant  • 19-minute read\nRead article\nGoogle Threat Intelligence News and Alerts\nSubscribe now to receive timely news and alerts from Google Threat Intelligence, including the latest threat-focused blog posts, reports, webinars, podcasts and more.\nSubscribe now\nThreat Intelligence\nStaying a Step Ahead: Mitigating the DPRK IT Worker Threat\nBy Mandiant  • 25-minute read\nThreat Intelligence\nHow Low Can You Go? An Analysis of 2023 Time-to-Exploit Trends\nBy Mandiant  • 10-minute read\nThreat Intelligence\nUNC5537 Targets Snowflake Customer Instances for Data Theft and Extortion\nBy Mandiant  • 9-minute read\nThreat Intelligence RSS Feed\nWant to keep up-to-date on the latest Threat Intelligence posts? Add the Threat Intelligence RSS feed URL to your RSS reader today.\nThreat Intelligence RSS feed URL\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nThreat Intelligence\n(In)tuned to Takeovers: Abusing Intune Permissions for Lateral Movement and Privilege Escalation in Entra ID Native Environments\nBy Mandiant  • 7-minute read\nThreat Intelligence\nHybrid Russian Espionage and Influence Campaign Aims to Compromise Ukrainian Military Recruits and Deliver Anti-Mobilization Narratives\nBy Google Threat Intelligence Group  • 10-minute read\nThreat Intelligence\ncapa Explorer Web: A Web-Based Tool for Program Capability Analysis\nBy Mandiant  • 6-minute read\nThreat Intelligence\nLummaC2: Obfuscation Through Indirect Control Flow\nBy Mandiant  • 23-minute read\nThreat Intelligence\nUNC1860 and the Temple of Oats: Iran’s Hidden Hand in Middle Eastern Networks\nBy Mandiant  • 21-minute read\nThreat Intelligence\nAn Offer You Can Refuse: UNC2970 Backdoor Deployment Using Trojanized PDF Reader\nBy Mandiant  • 22-minute read\nLoad more stories\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
      "recursive_crawls": [
        {
          "url": "https://cloud.google.com/blog/topics/threat-intelligence/unc1860-iran-middle-eastern-networks",
          "text": "UNC1860 and the Temple of Oats: Iran’s Hidden Hand in Middle Eastern Networks | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nUNC1860 and the Temple of Oats: Iran’s Hidden Hand in Middle Eastern Networks\nSeptember 19, 2024\nMandiant\nWritten by:\nStav Shulman, Matan Mimran, Sarah Bock, Mark Lechtik\nExecutive Summary\nUNC1860 is a persistent and opportunistic Iranian state-sponsored threat actor that is likely affiliated with Iran’s Ministry of Intelligence and Security (MOIS). A key feature of UNC1860 is its collection of specialized tooling and passive backdoors that Mandiant believes supports several objectives, including its role as a probable initial access provider and its ability to gain persistent access to high-priority networks, such as those in the government and telecommunications space throughout the Middle East.\nUNC1860’s tradecraft and targeting parallels with\nShrouded Snooper\n,\nScarred Manticore\n, and\nStorm\n-\n0861\n, Iran-based threat actors publicly reported to have targeted the telecommunications and government sectors in the Middle East. These groups have also reportedly\nprovided initial access\nfor destructive and disruptive operations that targeted Israel in late October 2023 with BABYWIPER and Albania in 2022 using\nROADSWEEP\n. Mandiant cannot independently corroborate that UNC1860 was involved in providing initial access for these operations. However, we identified specialized UNC1860 tooling including GUI-operated malware controllers, which are likely designed to facilitate hand-off operations, further supporting the initial access role played by UNC1860.\nUNC1860 additionally maintains an arsenal of utilities and collection of “main-stage” passive backdoors designed to gain strong footholds into victim networks and establish persistent, long-term access. Among these main-stage backdoors includes a Windows kernel mode driver repurposed from a legitimate Iranian anti-virus software filter driver, reflecting the group’s reverse engineering capabilities of Windows kernel components and detection evasion capabilities. These capabilities demonstrate that UNC1860 is a formidable threat actor that likely supports various objectives ranging from espionage to network attack operations. As tensions continue to ebb and flow in the Middle East, we believe this actor’s adeptness in gaining initial access to target environments represents a valuable asset for the Iranian cyber ecosystem that can be exploited to answer evolving objectives as needs shift.\nTeamwork Makes the Dream Work: UNC1860’s Role as an Initial Access Provider\nMandiant identified two custom, GUI-operated malware controllers tracked as TEMPLEPLAY and VIROGREEN that we assess were used to provide a team outside of UNC1860 remote access to victim networks. This tooling, coupled with\npublic reporting\nand evidence suggesting that the group collaborates with MOIS-affiliated groups such as APT34, strengthens the assessment that UNC1860 acts as an initial access agent.\nUsing Sustained Access to Support Initial Access Operations\nIn 2020, Mandiant responded to an engagement in which UNC1860 used the victim’s network as a staging area to conduct additional scanning and exploitation operations against unrelated entities. The actor was observed scanning IP addresses predominantly located in Saudi Arabia in an attempt to identify exposed vulnerabilities. UNC1860 also used a command-line tool to validate credentials of accounts and email addresses across multiple domains belonging to Qatari and Saudi Arabian entities, and later targeted VPN servers of entities in the region.\nUNC1860 Overlaps with APT34\nMandiant responded to several engagements in 2019 and 2020 in which organizations compromised by suspected APT34 actors were previously compromised by UNC1860. Similarly, organizations previously compromised by suspected APT34 actors were later compromised by UNC1860, suggesting the group may play a role in assisting with lateral movement. Mandiant additionally identified recent indications of operational pivoting to Iraq-based targets by both APT34-related clusters and UNC1860.\nWeb Shell and Droppers\nUNC1860 web shells and droppers, such as STAYSHANTE and SASHEYAWAY, deployed and placed on compromised servers by the group after gaining initial access have the potential to be used in hand-off operations based on their functionality. In March 2024, the\nIsraeli National Cyber Directorate was alerted\nto wiper activity targeting Israeli entities across various sectors in Israel, including managed service providers, local governments, and academia; technical indicators included the unique STAYSHANTE web shell and the SASHEYAWAY dropper we attribute to UNC1860.\nSTAYSHANTE is typically installed using names masquerading as Windows server file names or dependencies, and is controlled by the VIROGREEN custom framework described as follows.\nSASHEYAWAY has a low detection rate that allows for the smooth execution of full passive backdoors, such as TEMPLEDOOR, FACEFACE, and SPARKLOAD, embedded within it.\nCustom, GUI-Operated Malware Controllers\nUNC1860 GUI-operated malware controllers TEMPLEPLAY and VIROGREEN could provide third-party actors who have no previous knowledge of the target environment the ability to remotely access infected networks via RDP and to control previously installed malware on victim networks with ease. These controllers additionally could provide third-party operators an interface that walks operators through how to deploy custom payloads and perform other operations such as conducting internal scanning and exploitation within the target network.\nFigure 1: Illustration of collaborator actor's command and control (C2 or C&C) used to utilize existing UNC1860 implant infrastructure in compromised network\nTEMPLEPLAY Controller\nTEMPLEPLAY (MD5:\nc517519097bff386dc1784d98ad93f9d\n) is a .NET-based controller for the TEMPLEDOOR passive backdoor. It is internally named Client Http and consists of several tabs, each one facilitating control of a separate backdoor command.\nThe Command Prompt Tab (Figure 2) s\nends a command line to execute on the target host. The default command is cmd /c 2 > &1 with parameter whoami.\nFigure 2: TEMPLEPLAY GUI, Command Prompt Tab\nThe Upload File Tab (Figure 3) s\nends a file from a local path to a target path on the remote machine using a POST request. The default target path is\nC:\\Program Files\\Common Files\\Microsoft Shared\\Web Server Extensions\\15\\TEMPLATE\\LAYOUTS\n.\nFigure 3: Upload File Tab\nThe Download File Tab (Figure 4) is used to obtain a file from a given path on the infected machine. The default path on the infected machine is C:\\Programdata\\1.txt.\nFigure 4: Download File Tab\nThe Http Proxy Tab (Figure 5) a\nllows a remote machine infected with TEMPLEDOOR to be used as a middlebox that forwards data to a chosen target server. It appears that it is primarily intended to facilitate an RDP connection with the target server, most likely in cases where the latter is not accessible directly over the internet due to network boundaries (such as a NAT or a firewall), but may be accessible via the TEMPLEDOOR infected machine.\nFigure 5: HTTP Proxy Tab\nThe URLs Tab (Figure 6) includes\nURL endpoints that are used when connecting to the infected machine. An endpoint string is chosen at random from the lists defined in this tab. These endpoints correspond to the ones that are defined in the TEMPLEDOOR sample (\nMD5:\nc57e59314aee7422e626520e495effe0\n).\nFigure 6: URLs Tab\nThe TEMPLEPLAY GUI also includes a Test Backdoor link, which c\nreates a GET request with the string\nwOxhuoSBgpGcnLQZxipa\nas the relative URI and checks for the string\nUsEPTIkCRUwarKZfRnyjcG13DFA\nin the response. This corresponds to an echo \\ ping mechanism that was seen in use in the TEMPLEDOOR samples (\nMD5:b219672bcd60ce9a81b900217b3b5864\n)and\nMD5:c57e59314aee7422e626520e495effe0\n).\nAdditional links include the Explore link that\nopens a new Explorer window in the host where the controller runs, and the\nHttp Setting link points to a s\net of configuration parameters that pertain to the HTTP requests sent between the controller and the TEMPLEDOOR passive backdoor.\nVIROGREEN Controller\nVIROGREEN is a custom framework used to exploit vulnerable SharePoint servers with CVE-2019-0604 (Figure 7). The framework provides post-exploitation capabilities including scanning for and exploiting CVE-2019-0604; controlling post-exploitation payloads, backdoors (including the STAYSHANTE web shell and the BASEWALK backdoor) and tasking; controlling a compatible agent regardless of how the agent has been implanted; and executing commands and uploading/downloading files.\nAdditional details on TEMPLEPLAY and VIROGREEN can be found in the\nTechnical Annex\n.\nFigure 7: VIROGREEN GUI\nUNC1860 Malware: Gaining Persistent Access\nUNC1860 gains initial access to victim environments in an opportunistic manner via the exploitation of vulnerable internet-facing servers leading to web shell deployment. After obtaining an initial foothold, the group typically deploys additional utilities and a selective suite of passive implants that are designed to be stealthier than common backdoors. These provide a higher degree of operational security by removing the dependency for classic C2 infrastructure, making detection more difficult for network defenders.\nCisco\nand\nCheck Point\nhave provided extensive analysis on UNC1860’s passive implants that correspond to OATBOAT, a loader that loads and executes shellcode payloads;\nFortinet\nadditionally provided analysis regarding the Windows kernel driver, WINTAPIX, which has similar code to a malicious driver we track as TOFUDRV (Figure 8 and Figure 9).\nA key feature of UNC1860 includes its maintenance of this diverse collection of passive/listener-based utilities that support the group’s initial access and lateral movement goals. We believe the group additionally maintains a smaller collection of “main-stage” backdoors that have greater capabilities than the usual web shells and small .NET utilities that may be deployed for select high-priority victims in the telecommunications sector. These implants demonstrate the group’s keen understanding of the Windows operating system (OS) and network detection solutions, reverse engineering capabilities of Windows kernel components, and detection evasion capabilities.\nPassive implants do not initiate outbound traffic from the victim network to a C2 server. Further, the inbound traffic containing commands or payloads can arrive from any volatile source (e.g., VPN nodes within the target country, from another victim, or even internally from another part of the victim network). This makes network monitoring more difficult. Web shells and passive implants leverage HTTPS-encrypted traffic so commands/payloads cannot be extracted from captured network traffic.\nBoth passive implants TOFUDRV and TOFULOAD leverage undocumented Input/Output Control commands for communication, which requires knowledge of the OS and can lower the chances of this traffic being detected by endpoint detection and response (EDR) solutions.\nLoading drivers is a \"high risk / high reward\" situation as loading them without creating a critical error screen requires extensive knowledge both of the OS internals and victim environments; however, using them promises lower detection rates and possibilities akin to filtering drivers, which act as middlemen allowing for the inspection, modification, or blocking of network traffic before it reaches the device or application, as well as assets like file system objects and registry entries.\nThe passive backdoor TEMPLEDROP repurposed an Iranian AV software Windows file system filter driver named Sheed AV (MD5: 0c93cac9854831da5f761ee98bb40c37) for the purpose of protecting some of the files it deploys as well as its own file from modification.\nA .NET-based utility for defense evasion tracked as TEMPLELOCK was observed being implemented in both foothold utilities such as ROTPIPE and more complex passive implants such as TEMPLEDROP. TEMPLELOCK is capable of terminating threats associated with the Windows Event Log service and restarting the service’s operation on demand.\nFigure 8: Driver file protection logic in WINTAPIX (MD5: 286bd9c2670215d3cb4790aac4552f22)\nFigure 9: Driver file protection logic in TOFUDRV (MD5: b4b1e285b9f666ae7304a456da01545e)\nUNC1860 Unique Artifacts Suggest Consistent Development Support\nIn addition to the previous observations, we identified the following recurring artifacts related to the group’s independent implementation of Base64 encoding/decoding and XOR encryption/decryption in .NET code, despite these functions being available in build-in .NET code.\nThe intent of the independent implementation of these functions is not entirely clear. Nevertheless, it is highly likely that using such custom libraries bypasses common detections by EDRs and other security tools—detections designed to identify usage combinations of functions commonly seen in malware. Additionally, using these custom libraries may allow better compatibility if any of the built-in functions change in a specific version of a .NET control to ensure the group’s tooling is always compatible with its encryption and encoding schemes and/or to better help evade detection.\nWe observed the same encoding method using the Base64 algorithm to encode and decode data sent between controllers and proxy servers. In several cases, we identified the reuse of a seemingly misspelled Base64 DLL using the name “bsae64” in both foothold utilities deployed via SASHEYAWAY and passive implants including TEMPLEDOOR.\nWe observed the same rolling encryption module, XORO (MD5:\n57cd8e220465aa8030755d4009d0117c),\ndropped by the TANKSHELL utility; TUNNELBOI network tunneller capable of establishing a connection with a remote host, managing web shells on the network, and creating RDP connections; and the TEMPLEPLAY controller.\nFoothold Utilities and Backdoors and Malware Use for Longer Term Persistence\nMandiant is tracking multiple foothold utilities and backdoors used in UNC1860 initial access operations. These generally use custom obfuscation methods that can lower detection rates and make analysis more difficult by renaming strings and function names.  Additionally, we are tracking numerous code families that we consider to be UNC1860 “main-stage” implants that further increase the group’s persistence in victim environments.\nPlease see the\nTechnical Annex\nfor more information.\nAdditional Protection Information for Google Cloud Customers\nFor Google SecOps Enterprise+ customers, SecOps rules have been released to the\nEmerging Threats\nrule pack, and IOCs listed in this blog post are available for prioritization with\nApplied Threat Intelligence\n.\nIndicators of Compromise (IOCs)\nA Google Threat Intelligence Collection featuring\nIOCs related to the activity described in this post\nis now available for registered users.\nMD5 Hashes\n1176381da7dea356f3377a59a6f0e799\n41f4732ed369f2224a422752860b0bc5\n4029bc4a06638bb9ac4b8528523b72f6\n126bc1c30fba27f8bf67dce4892b1e8c\n0c9ff0db00f04fd4c6a9160bffd85a1d\na7693e399602eb79db537c5022dd1e01\nd9719f6738dbfaa21be7f184512fe074\n17b27e6aa0ab6501f11bb4d2e0f829ff\n4dd6250eb2d368f500949952eb013964\n69fd67c115349abb4a313230a1692642\n7f5f5f290910d256e6b012f898c88bf3\nc90ec587e3333dabb647ebc182673460\nefe8043e1b4214640c5f7b5ddf737653\na90236e4962620949b720f647a91f101\nb26d54b7da7b2bf600104f69da4ea00f\nd87ca3f830b8b53fde358bb64900f6af\nc50ae2c4b76f0d5724ec240568c78c4f\n57cd8e220465aa8030755d4009d0117c\n4b2c78bb2c439998cff0cc097a14b942\n4abcf21b63781a53bbc1aa17bd8d2cbc\na3ea0d13848a104c28d035a9d518acc2\nbd6464f12bb6f7f02b6ffebb363d8e5f\nf89be788e4adf665acf1a8ef8fcaa133\nf292e61774c267c3787fdfcace50ea7b\nc11a4e4a2d484513f79bd127a0387b0c\n14e54ff4805840e656efb8cd38de4751\n3d5d05f230ae702c04098de512d93d48\na038975255d3dda636d86ccd307f7838\n31f2369d2e38c78f5b3f2035dba07c08\nc21eefc65cda49f17ddd1d243a7bffb5\nc8fa0ce3ae6a13af640607ea606c55f9\n2cece71e107d12ffd74b2fb24bf339a6\nfa1c6f7a5e02374b9d33de2578cb3399\n1e896f026246872b2feb4f8e3e093815\n57c916da83cc634af22bde0ad44d0db3\n07db3058e32fe5f36823dc7092cd7d5b\n3dd829fb27353622eff34be1eabb8f18\n1e6679cd25d1bb127a0bec665adcf21e\n2e803d28809be2a0216f25126efde37b\n2398a83f10329a107801d3d23d06f7cb\n73fb0fe5cd96a14a4f85639223aec6a8\n85427a8a47c4162b48d8dfb37440665d\na500561c0b374816972094c2aa90da2a\na65ee1a82975ee4c8d4e70219e1bfff5\nce537dd649a391e52c27a3f88a0a8912\ne67687b4443f58d2b0a465e3af3caffe\nb34883fb1630db43e06a38cebfa0bce2\n46804472541ed61cc904cd14be18fe1d\n4de802f7e61cb8c820a02e042b58b215\n929b12bc9f9e5f8e854de1d46ebf40d9\nf0dfb7bf01c0412891da8fa2702f4c7b\nb219672bcd60ce9a81b900217b3b5864\nfc90907e70f18c7f6a6b9d9599b6f97c\nd1e45afbfd3424612b4a4218cc7357ef\nda0085a97c38ead734885e5cced1847f\n490590bfdeeedf44b3ae306409bb0d03\ne86e885e6c96ac72482741d8696c17fb\nca3f0d25f7da0e8cde8e1f367451c77a\n7b2fa099d51fa3885766f6d60d768748\n6626dbe74acd15d06ff6900071ef240c\nYARA Rules\nrule M_Autopatt_DropperMemonly_WINTAPIX_1 {\r\n    meta:\r\n        author = Mandiant\r\n        description = \"wintapix malware family\"\r\n        created = \"06/26/2023\"\r\n        modified = \"06/26/2023\"\r\n        version = \"1.0\"\r\n\r\n    strings:\r\n        $p00_0 = {84ec5ff5f84863f6e9[4]66458b65??4981c5[4]4d0faccf}\r\n        $p00_1 = {0f16c00f11014c03c14883c1??\r\n4883e1??4c2bc14d8bc849c1e9??74}\r\n    condition:\r\n        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\r\n        (\r\n            ($p00_0 in (660000..690000) and $p00_1 in (9700..20000))\r\n        )\r\n}\nimport \"pe\"\r\nrule M_WINTAPIX_StringDecodingMethod_1 {\r\n    meta:\r\n        author = Mandiant\r\n        hash1 = \"286bd9c2670215d3cb4790aac4552f22\"\r\n        hash2 = \"4dd6250eb2d368f500949952eb013964\"\r\n        desc = \"Detects the byte pattern of a string decoding \r\nmethod found in the WINTAPIX driver image\"\r\n    strings:\r\n        $a1 = { 48 89 54 24 10 48 89 4C 24 08 48 83 EC 18 C7 \r\n04 24 00 00 00 00 48 63 04 24 48 8B 4C 24 ?? 0F BE 04 01 \r\n48 8B 4C 24 ?? 0F B6 49 ?? 33 C1 48 63 0C 24 48 8B 54 24 \r\n?? 88 04 0A 8B 04 24 FF C0 89 04 24 8B 04 24 FF C8 48 98 \r\n48 8B 4C 24 ?? 0F B6 04 01 85 C0 75 }\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        filesize < 1MB and\r\n        pe.subsystem == pe.SUBSYSTEM_NATIVE and\r\n        all of them\r\n}\nimport \"pe\"\r\nrule M_WINTAPIX_PaddedStrings_1 {\r\n    meta:\r\n        author = Mandiant\r\n        hash1 = \"286bd9c2670215d3cb4790aac4552f22\"\r\n        hash2 = \"4dd6250eb2d368f500949952eb013964\"\r\n        desc = \"Detects unique strings found in the WINTAPIX \r\ndriver image\"\r\n    strings:\r\n        $a1 = { CC CC CC CC CC CC CC 4E 74 44 65 6C 61 79 \r\n45 78 65 63 75 74 69 6F 6E 00 }\r\n        $a2 = { CC CC CC CC CC 5C 00 }\r\n        $a3 = \"InitSafeBootMode\" ascii fullword\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        pe.subsystem == pe.SUBSYSTEM_NATIVE and\r\n        filesize < 1MB and\r\n        (\r\n            (\r\n                all of them and\r\n                #a2 == 2\r\n            ) or\r\n            pe.imphash() == \"8d070a93a45ed8ba6dba6bfbe0d084e7\"\r\n        )\r\n}\nimport \"dotnet\"\r\nrule M_UNC1860_TEMPLEDOOR_Strings_1 {\r\n    meta:\r\n        author = Mandiant\r\n        date = \"28/02/2024\"\r\n        hash1 = \"caffdb648a0a68cd36694f0f0c7699d7\"\r\n        desc = \"Detects the TEMPLEDOOR family based on \r\nunique strings\"\r\n        comment = \"Triggers on TUNNELBOI sample \r\nc517519097bff386dc1784d98ad93f9d\"\r\n    strings:\r\n        $url = \"{0}://+:{1}/{2}/\" wide fullword\r\n        $a1 = \"+CjxoZWFkPgo8bWV0YSBodHRwLWVxdWl2\r\nPSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtb\r\nDsgY2hhcnNldD1pc28tODg1OS0xIi8\" wide\r\n        $b1 = \"Jet\" wide fullword\r\n        $b2 = \" Ver\" wide fullword\r\n        $b3 = \"CmD\" wide fullword\r\n        $c1 = \"Command\" wide fullword\r\n        $c2 = \"Upload\" wide fullword\r\n        $c3 = \"Download\" wide fullword\r\n        $c4 = \"Load\" wide fullword\r\n        $c5 = \"Rundll\" wide fullword\r\n        $c6 = \"ERROR\" wide fullword\r\n\r\n    condition:\r\n        int16(0) == 0x5a4d and\r\n        uint32(uint32(0x3C)) == 0x00004550 and\r\n        dotnet.is_dotnet and\r\n        $url and\r\n        (\r\n            $a1 or\r\n            2 of ($b*) or\r\n            5 of ($c*)\r\n        )\r\n}\nimport \"dotnet\"\r\nrule M_UNC1860_TEMPLEDOOR_BytePatterns_1 {\r\n    meta:\r\n        author = Mandiant\r\n        date = \"28/02/2024\"\r\n        hash1 = \"caffdb648a0a68cd36694f0f0c7699d7\"\r\n        desc = \"Detects the TEMPLEDOOR family based \r\non unique byte patterns\"\r\n        comment = \"Triggers on TUNNELBOI sample \r\nc517519097bff386dc1784d98ad93f9d and on WINPAY \r\nsample b219672bcd60ce9a81b900217b3b5864\"\r\n    strings:\r\n        $encode_msil = { 7E ?? ?? 00 04 1F 41 1F 61 6F ?? \r\n?? 00 0A D2 0A 02 2C 07 02 8E 16 FE 03 2B 01 16 2C 69 \r\n16 0B 2B 0F 02 07 02 07 91 06 61 19 58 D2 9C 07 17 58 \r\n0B 07 02 8E 69 FE 04 2D E9 02 28 ?? ?? 00 0A } // Packet \r\nencoding method MSIL\r\n        $encryption_key = { 54 62 2d 0c 03 45 49 15 2b 43 \r\n59 4a 4e 0c 40 }\r\n    condition:\r\n        int16(0) == 0x5a4d and\r\n        uint32(uint32(0x3C)) == 0x00004550 and\r\n        dotnet.is_dotnet and\r\n        any of them\r\n}\nrule M_OBFUSLAY_UNC1860_1 {\r\n    meta:\r\n        desc = \"Detects the UNC1860 OBFUSLAY malware by its \r\nstring decryption method\"\r\n        rs1 = \"b66919a18322aa4ce2ad47d149b7fe38063cd3cfa2\r\ne4062cd1a01ad6b3e47651\"\r\n    strings:\r\n        $a1 = {\r\n            FE 09 00 00\r\n            6F ?? 00 00 0A\r\n            FE 0E 00 00\r\n            FE 0C 00 00\r\n            20 02 00 00 00\r\n            5B\r\n            8D ?? 00 00 01\r\n            FE 0E 01 00\r\n            20 00 00 00 00\r\n            FE 0E 04 00\r\n            38 39 00 00 00\r\n            FE 0C 01 00\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            5B\r\n            FE 09 00 00\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            6F ?? 00 00 0A\r\n            20 10 00 00 00\r\n            28 ?? 00 00 0A\r\n            9C\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            58\r\n            FE 0E 04 00\r\n            FE 0C 04 00\r\n            FE 0C 00 00\r\n            3F BA FF FF FF\r\n            FE 0C 01 00\r\n        }\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        all of them\r\n}\nrule M_APT_CRYPTOSLAY_UNC1860_1 {\r\n    meta:\r\n        desc = \"Detects the UNC1860 CRYPTOSLAY malware by its \r\nstring decryption method\"\r\n        rs1 = \"3F2FD2DFD27BF3CAFCBF0946E308832E11A1D9C1\r\nD98FB04AC848E023E6720F53\"\r\n        rs2 = \"5c1a42e9baaec115df337d2f4a9dcce8d73f29375921\r\n827e367fcba8499cdfa2\"\r\n    strings:\r\n        $a1 = {\r\n            FE 09 00 00\r\n            6F ?? 00 00 0A\r\n            FE 0E 00 00\r\n            FE 0C 00 00\r\n            20 02 00 00 00\r\n            5B\r\n            8D ?? 00 00 01\r\n            FE 0E 01 00\r\n            20 00 00 00 00\r\n            FE 0E 04 00\r\n            38 39 00 00 00\r\n            FE 0C 01 00\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            5B\r\n            FE 09 00 00\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            6F ?? 00 00 0A\r\n            20 10 00 00 00\r\n            28 ?? 00 00 0A\r\n            9C\r\n            FE 0C 04 00\r\n            20 02 00 00 00\r\n            58\r\n            FE 0E 04 00\r\n            FE 0C 04 00\r\n            FE 0C 00 00\r\n            3F BA FF FF FF\r\n            28 ?? 00 00 0A\r\n        }\r\n        $a2 = {\r\n            FE 09 00 00\r\n            6F ?? 00 00 0A\r\n            FE 0E 00 00\r\n            FE 0C 00 00\r\n            20 02 00 00 00\r\n            5B\r\n            8D ?? 00 00 01\r\n            FE 0E 01 00\r\n            20 00 00 00 00\r\n            FE 0E 06 00\r\n            38 39 00 00 00\r\n            FE 0C 01 00\r\n            FE 0C 06 00\r\n            20 02 00 00 00\r\n            5B\r\n            FE 09 00 00\r\n            FE 0C 06 00\r\n            20 02 00 00 00\r\n            6F ?? 00 00 0A\r\n            20 10 00 00 00\r\n            28 ?? 00 00 0A\r\n            9C\r\n            FE 0C 06 00\r\n            20 02 00 00 00\r\n            58\r\n            FE 0E 06 00\r\n            FE 0C 06 00\r\n            FE 0C 00 00\r\n            FE 04\r\n            FE 0E 07 00\r\n            FE 0C 07 00\r\n            3A B0 FF FF FF\r\n        }\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        any of them\r\n}\nrule M_Autopatt_DropperMemonly_OATBOAT_1 {\r\n    meta:\r\n        author = \"autopatt\"\r\n        description = \"oatboat malware family\"\r\n        created = \"02/09/2024\"\r\n        modified = \"02/09/2024\"\r\n        version = \"1.0\"\r\n\r\n    strings:\r\n        $p00_0 = {48897c24??55488bec4883ec??488bf9c745[5]33d\r\nbc745[5]488d4d}\r\n        $p00_1 = {443ac975??48ffc64883c3??493bf372??498b42??4885c075}\r\n    condition:\r\n        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\r\n        (\r\n            ($p00_0 in (250..6500) and $p00_1 in (0..6000))\r\n        )\r\n}\nrule SASHEYAWAY_Strings_1 {\r\n    meta:\r\n        desc = \"Strings observed in the webshell loader\"\r\n        rs1 = \"2538767f13218503bccf31fccb74e753199\r\n4b69a36a3780b53ba5020d938af20\"\r\n    strings:\r\n        $ = \"FromBase64String\"\r\n        $ = \"Page Language=\\\"C#\\\"\"\r\n        $ = \"private static System.Reflection.Assembly\"\r\n        $ = \"Page_Load\"\r\n        $ = \"System.Reflection.MethodInfo\"\r\n        $ = \"Activator.CreateInstance\"\r\n        $ = \"Invoke\"\r\n    condition:\r\n        all of them\r\n}\nrule M_Hunting_Backdoor_TOFULOAD_1 {\r\n  meta:\r\n    author = Mandiant\r\n    date_created = \"2023-08-15\"\r\n    date_modified = \"2023-08-15\"\r\n    description = \"This is a hunting rule to look for TOFULOAD \r\nbackdoor used by UNC1860\"\r\n    md5 = \"d1ce3117060e85247145c82005dda985\"\r\n  strings:\r\n    $s1 = {66 77 88 99 48 8D [2] C7 [2] 52 74 6C 52}\r\n              // 0x99887766; LEA ??, ??; MOV ??, 'RltR';\r\n    $s2 = {B8 E1 83 0F 3E F7 [1] C1 [1] 03 0F [2] 6B [1] 21}\r\n      // MOV ??, 0x3E0F83E1; MUL ??, ??; SHR ??, 03; MOVZX ??, ??; \r\nIMUL ??, ??, 21;\r\n    $s3 = {FF [1] 40 [2] 43 32 [2] 41 88 [3] 44 8B [1] 4D [2] 7C} // \r\nINC ??; MOV ??, ??; XOR ??, ??; MOV ??, ??; MOV ??, ??; CMP ??, ??; JL  \r\n  condition:\r\n    filesize < 50KB and\r\n    any of them\r\n}\nimport \"dotnet\"\r\nrule M_UNC1860_TEMPLEDROP_Strings_2 {\r\n    meta:\r\n        author = Mandiant\r\n        date = \"28/02/2024\"\r\n        hash1 = \"6d3041b89484c273376e5189e190d235\"\r\n        desc = \"Detects the TEMPELDROP family based on unique strings\"\r\n        comment = \"Triggers on TEMPLEDOOR controller sample c517519\r\n097bff386dc1784d98ad93f9d\"\r\n    strings:\r\n        $a1 = \"Nothing changed :D\" wide fullword\r\n        $a2 = \"Access: KO\" wide fullword\r\n        $a3 = \"Eventlog stoped.\" wide fullword\r\n        $b1 = \"The Microsoft Exchange Self Protection Driver.\" wide fullword\r\n        $b2 = \"The Microsoft Exchange Filter Driver.\" wide fullword\r\n        $c1 = \"Create RegKey: \" wide\r\n        $c2 = \"Create Service: \" wide\r\n        $c3 = \"Test Event lock: \" wide\r\n        $c4 = \"Test http listner: \" wide\r\n        $c5 = \"Test IO Changes: \" wide\r\n        $c6 = \"Test 'Event lock': \" wide\r\n        $d1 = \"no active http port to listen.\" wide\r\n        $d2 = \"Prefixes.Add Error , \" wide\r\n        $d3 = \"' driver service created and started.\" wide\r\n        $d4 = \"' service started.\" wide\r\n        $d5 = \"Unhandled exception on create reg key \" wide\r\n        $d6 = \"Failed to change file 'CreationTime'.\" wide\r\n\r\n    condition:\r\n        int16(0) == 0x5a4d and\r\n        uint32(uint32(0x3C)) == 0x00004550 and\r\n        dotnet.is_dotnet and\r\n        (\r\n            1 of ($a*) or\r\n            1 of ($b*) or\r\n            2 of ($c*) or\r\n            2 of ($d*)\r\n        )\r\n}\nrule M_Autopatt_Backdoor_TOFUDRV_1 {\r\n    meta:\r\n        author = Mandiant\r\n        description = \"tofudrv malware family\"\r\n        created = \"11/29/2023\"\r\n        modified = \"11/29/2023\"\r\n        version = \"1.0\"\r\n\r\n    strings:\r\n        $p00_0 = {eb??33c083f8??0f85[4]488b4c24??e8[4]eb??c74424[5]eb}\r\n        $p00_1 = \r\n{f3aa41b8[4]33d2488d4c24??e8[4]488b8424[4]48898424[4]48638424[4]48898424}\r\n    condition:\r\n        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and\r\n        (\r\n            ($p00_0 in (34000..45000) and $p00_1 in (28000..39000))\r\n        )\r\n}\nimport \"pe\"\r\nrule M_TOFUDRV_Strings_1 {\r\n    meta:\r\n        author = Mandiant\r\n        hash = \"b4b1e285b9f666ae7304a456da01545e\"\r\n        desc = \"Detects cleartext strings that appear in the TOFUDRV image\"\r\n    strings:\r\n        $a1 = \"\\\\systemroot\\\\system32\\\\drivers\" ascii fullword\r\n        $a2 = \"\\\\SafeBoot\\\\Minimal\\\\\" ascii fullword\r\n        $a3 = \"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\" \r\nascii fullword\r\n        $a4 = \"\\\\SafeBoot\\\\Network\\\\\" ascii fullword\r\n        $a5 = \r\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\" \r\nascii fullword\r\n        $a6 = \"Found\" ascii fullword\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        filesize < 500KB and\r\n        pe.subsystem == pe.SUBSYSTEM_NATIVE and\r\n        (\r\n            3 of them or\r\n            pe.imphash() == \"ff6f16b00c9f36b32cd60fecd4dfc8e9\"\r\n        )\r\n}\nimport \"pe\"\r\nrule M_TOFUDRV_RtlSubtreeStackStrings_1 {\r\n    meta:\r\n        author = Mandiant\r\n        hash = \"b4b1e285b9f666ae7304a456da01545e\"\r\n        desc = \"Detects a stack string byte pattern in a function intended \r\nto resolve the memory image base of ntoskrnl.exe in TOFUDRV\"\r\n    strings:\r\n        // \"RtlSubtreePredecessor\"\r\n        $a1 = { C6 44 24 ?? 52 C6 44 24 ?? 74 C6 44 24 ?? 6C C6 44 24 ?? \r\n53 C6 44 24 ?? 75 C6 44 24 ?? 62 C6 44 24 ?? 74 C6 44 24 ?? 72 C6 44 \r\n24 ?? 65 C6 44 24 ?? 65 C6 44 24 ?? 50 C6 44 24 ?? 72 C6 44 24 ?? 65 \r\nC6 44 24 ?? 64 C6 44 24 ?? 65 }\r\n        // \"RtlSubtreeSuccessor\"\r\n        $a2 = { C6 84 24 ?? 00 00 00 6C C6 84 24 ?? 00 00 00 53 C6 84 24 \r\n?? 00 00 00 75 C6 84 24 ?? 00 00 00 62 C6 84 24 ?? 00 00 00 74 C6 84 \r\n24 ?? 00 00 00 72 C6 84 24 ?? 00 00 00 65 C6 84 24 ?? 00 00 00 65 C6 \r\n84 24 ?? 00 00 00 53 C6 84 24 ?? 00 00 00 75 }\r\n        $KeGetPcr = { 65 48 8B 04 25 18 00 00 00 48 89 44 24 }\r\n    condition:\r\n        uint16(0) == 0x5A4D and\r\n        filesize < 500KB and\r\n        pe.subsystem == pe.SUBSYSTEM_NATIVE and\r\n        $KeGetPcr and\r\n        any of ($a*)\r\n}\nrule M_Dropper_MSIL_TEMPLESHOT_1 {\r\n    meta:\r\n        author = Mandiant\r\n        date_created = \"2020-05-22\"\r\n        date_modified = \"2020-05-22\"\r\n        md5 = \"6d3041b89484c273376e5189e190d235\"\r\n        rev = 2\r\n    strings:\r\n        $ss1 = \"--install\" fullword wide\r\n        $ss2 = \"' directory created.\" fullword wide\r\n        $ss3 = \"' file created.\" fullword wide\r\n        $ss4 = \"' service created.\" fullword wide\r\n        $ss5 = \"Nothing changed :D\" fullword wide\r\n        $ss6 = \"\\x00ProtectDriver\\x00\"\r\n        $ss7 = \"\\x00WriteAllBytes\\x00\"\r\n        $ss8 = \"\\x00CopyTime\\x00\"\r\n        $ss9 = \"T\\x00V\\x00q\\x00Q\\x00\"\r\n    condition:\r\n        (\r\n            uint16(0) == 0x5A4D and\r\n            uint32(uint32(0x3C)) == 0x00004550\r\n        ) and\r\n        all of them\r\n}\nrule M_Backdoor_MSIL_TEMPLESHOT_2 {\r\n    meta:\r\n        author = Mandiant\r\n        date_created = \"2020-05-22\"\r\n        date_modified = \"2020-05-22\"\r\n        md5 = \"a991bdbf1e36d7818d7a340a35a4ea26\"\r\n        rev = 2\r\n    strings:\r\n        $sb1 = { 02 7B [2] 00 04 [0-8] FE 03 [0-8] 39 [4-8] 02 7B [2] 00 04 \r\n[5] 0? 02 7B [2] 00 04 [5-12] 0C }\r\n        $sb2 = { 7B [2] 00 04 [0-16] 13 ?? 11 [1-8] 17 59 45 04 00 00 00 02 \r\n[4-64] 2B ?? 02 [1-2] 7B [2] 00 04 73 [2] 00 06 28 [2] 00 06 0A 2B ?? 02 \r\n[1-2] 7B [2] 00 04 73 [2] 00 06 28 [2] 00 06 [0-4] 0A 2B }\r\n        $ss1 = \"\\x00set_UseShellExecute\\x00\"\r\n        $ss2 = \"\\x00HttpListenerRequest\\x00\"\r\n        $ss3 = \"\\x00HttpListenerResponse\\x00\"\r\n        $ss4 = \"\\x00HttpListener\\x00\"\r\n    condition:\r\n        (\r\n            uint16(0) == 0x5A4D and\r\n            uint32(uint32(0x3C)) == 0x00004550\r\n        ) and\r\n        all of them\r\n}\nrule M_Backdoor_MSIL_TEMPLESHOT_1 {\r\n    meta:\r\n        author = Mandiant\r\n        date_created = \"2020-05-22\"\r\n        date_modified = \"2020-05-22\"\r\n        md5 = \"952482949f495fb66e493e441229ae4b\"\r\n        rev = 2\r\n    strings:\r\n        $sb1 = { 06 17 7D [4] 06 20 36 01 00 C0 7D [4] DE 00 07 \r\n15 3B [4] 07 28 [4-12] 0D [8-64] 11 06 [4-12] 13 07 11 07 39 [4-32] \r\n20 FF FF 1F 00 12 09 [0-12] 11 09 12 0A [4-12] 12 0A 11 07 }\r\n        $ss1 = \"\\x00GetProcessById\\x00\"\r\n        $ss2 = \"\\x00NtOpenThread\\x00\"\r\n        $ss3 = \"\\x00NtQueryInformationThread\\x00\"\r\n        $ss4 = \"\\x00ReadProcessMemory\\x00\"\r\n        $ss5 = \"\\x00NtTerminateProcess\\x00\"\r\n        $ss6 = \"\\x00set_UseShellExecute\\x00\"\r\n        $ss7 = \"\\x00DESCryptoServiceProvider\\x00\"\r\n        $ss8 = \"\\x00GetExecutingAssembly\\x00\"\r\n    condition:\r\n        (\r\n            uint16(0) == 0x5A4D and\r\n            uint32(uint32(0x3C)) == 0x00004550\r\n        ) and\r\n        all of them\r\n}\nPosted in\nThreat Intelligence\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
          "recursive_crawls": [
            {
              "url": "https://cloud.google.com/blog/topics/threat-intelligence/likely-iranian-threat-actor-conducts-politically-motivated-disruptive-activity-against?e=48754805",
              "text": "ROADSWEEP Ransomware Targets the Albanian Government | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nROADSWEEP Ransomware - Likely Iranian Threat Actor Conducts Politically Motivated Disruptive Activity Against Albanian Government Organizations\nAugust 4, 2022\nMandiant\nWritten by: Luke Jenkins, Emiel Haeghebaert, Alice Revelli, Ben Read\nExecutive Summary\nMandiant identified the ROADSWEEP ransomware family and a Telegram persona which targeted the Albanian government in a politically motivated disruptive operation ahead of an Iranian opposition organization’s conference in late July 2022.\nA previously unknown backdoor CHIMNEYSWEEP and a new variant of the ZEROCLEAR wiper may also have been involved.\nCHIMNEYSWEEP malware distribution data and decoy content, the operation’s timing and politically themed content, and the possible involvement of the ZEROCLEAR wiper indicate an Iranian threat actor is likely responsible.\nThis activity is a geographic expansion of Iranian disruptive cyber operations, conducted against a NATO member state. It may indicate an increased tolerance of risk when employing disruptive tools against countries perceived to be working against Iranian interests.\nPlease see the Technical Annex for relevant Yara rules and MITRE ATT&CK Techniques(T1007, T1012, T1027, T1033, T1055, T1057, T1070.004, T1070.006, T1082, T1083, T1087, T1112, T1113, T1134, T1489, T1497.001, T1518, T1543.003, T1569.002, and T1622).\nThreat Detail\nIn mid-July 2022, Mandiant identified a new ransomware family dubbed ROADSWEEP which drops a politically themed ransom note suggesting it targeted the Albanian government. In addition, a front named “HomeLand Justice” claimed credit for the disruptive activity that affected Albanian government websites and citizen services on July 18, 2022. The “HomeLand Justice” front posted a video of the ransomware being executed on its website and Telegram channel alongside alleged Albanian government documents and residence permits of ostensible members of the Mujahedeen-e-Khalq/People’s Mojahedin Organization of Iran (MEK, also known as MKO or PMOI), an Iranian opposition organization that was formerly designated as a terrorist group by the U.S. Department of State.\nOn July 18, 2022, the Albanian government\npublished\na statement announcing it had to “temporarily close access to online public services and other government websites” due to disruptive cyber activity.\nOn July 22, 2022, a ROADSWEEP ransomware sample was submitted to a public malware repository from Albania. Upon successful execution, this ROADSWEEP sample drops a ransom note\nincluding the text\n“Why should our taxes be spent on the benefit of DURRES terrorists?” (Figure 1). Durrës is a port city and the second most populous city in Albania.\nFigure 1: ROADSWEEP ransom note\nOn July 21, 2022, a front named “HomeLand Justice” leveraged the website “homelandjustice.ru” to start publishing ostensible news stories on the ransomware operation against the Albanian government along with a link to a Telegram channel named “HomeLand Justice.” The website, which implies that it is run by Albanian citizens, claimed credit for the ransomware activity with a video of “wiper activity,” and posted documents ostensibly internal to the Albanian government along with what it claimed to be Albanian residence permits of MEK members.\nThe website “homelandjustice[.]ru” and the Telegram channel both use a banner that appears identical to the wallpaper used by ROADSWEEP and contains the same politically themed language as the ransom note above (Figure 2). The platforms also posted a video of an alleged wiper executed on a host using this banner.\nFigure 2: ROADSWEEP wallpaper and HomeLand Justice banner\nAfter posting multiple links to news stories on the disruptive activity against the Albanian government on July 26, 2022, HomeLand Justice directly claimed credit for the operation on its Telegram channel in a message alleging corruption in the Albanian government and repeating the message from the ransom note (Figure 3). Notably, the posts used the hashtags #MKO, #ISIS, #Manez, and #HomeLandJustice. Manëz is a town in the Durrës County and the location for the World Summit of Free Iran conference which was set to take place on July 23-24.\nFigure 3: HomeLand Justice claims credit\nBoth the homelandjustice.ru website and the Telegram channel posted documents ostensibly belonging to Albanian government organizations along with what appear to be residence permits, marriage certificates, passports, and other personal documents belonging to alleged members of the MEK.\nCHIMNEYSWEEP Backdoor Likely Targets Iranian Diaspora and Dissidents\nMandiant further identified CHIMNEYSWEEP, a backdoor that uses either Telegram or actor-owned infrastructure for command-and-control and is capable of taking screenshots, listing and collecting files, spawning a reverse shell, and supports keylogging functionality. CHIMNEYSWEEP shares code with ROADSWEEP and based on observed decoy content has likely been used to target Farsi and Arabic speakers as far back as 2012.\nCHIMNEYSWEEP and ROADSWEEP share multiple code overlaps, including identical dynamic API resolution code. The shared code includes an embedded RC4 key to decrypt Windows API function strings at run time, which are resolved using LoadLibrary and GetProcAddress calls once decrypted. Both capabilities also share the same Base64 custom alphabet, one used to encode the decryption key, the other for command and control.\nBoth CHIMNEYSWEEP and ROADSWEEP use the RC4 key “8c e4 b1 6b 22 b5 88 94 aa 86 c4 21 e8 75 9d f3” and the custom Base64 alphabet “wxyz0123456789.-JKLMNOPghijklmnopqrstuvQRSTUVWXYZabcdefABCDEFGHI”.\nCHIMNEYSWEEP is dropped by a self-extracting archive signed with a valid digital certificate alongside either an Excel, Word, or video file which are likely used as benign decoy documents. However, these documents do not appear to be automatically opened when CHIMNEYSWEEP is executed.\nThe decoy documents have included Arabic-language lists of names, ostensibly of individuals in Lebanon, and a figure of Massoud Rajavi, the former leader of the Mujahedeen-e-Khalq (MEK), an Iranian opposition group (Figure 2).\nWe identified iterations of CHIMNEYSWEEP used as early as 2012.\nFigure 4: Image of Massoud Rajavi in a Word document used as decoy content alongside CHIMNEYSWEEP in August 2021\nZEROCLEAR\nOn July 19, 2022, one day after the Albanian government announcement of the disruptive activity, an Albanian user submitted a ZEROCLEAR wiper payload to a public malware repository. The ZEROCLEAR payload takes in command line arguments from the operator and results in corruption of the file system using the RawDisk driver.\nWhile we are unable to independently prove or disprove whether the ZEROCLEAR sample was used in this or any disruptive operation, the malware has previously been publicly reported to have links to Iran-nexus threat actors deploying it in support of disruptive activity in the Middle East as recently as 2020.\nAttribution\nMandiant does not have evidence linking this activity to a named threat actor but assesses with moderate confidence that one or multiple threat actors who have operated in support of Iranian goals are involved. This is based on the timing of the disruptive activity, the MEK-focused content of the HomeLand Justice persona’s Telegram channel, and the long history of CHIMNEYSWEEP malware targeting Farsi and Arabic speakers.\nThe city of Manëz, Durrës County, which were mentioned in the ROADSWEEP ransom note and on the HomeLand Justice Telegram channel, was set to host a conference “The World Summit of Free Iran” on July 23-24, 2022. Albanian media\nannounced\nthat on July 22 that the conference had been postponed due to a “terrorist attack threat.”\nThe World Summit of Free Iran is a conference convening entities opposed to the government of Iran, specifically members of the MEK, in Manëz, Durrës County, Albania.\nIranian and pro-Iran information operations have frequently targeted the MEK with antagonistic messaging, including that leveraging fabricated material such as forged documents. For example, the pro-Iran campaign\nRoaming Mayfly\nhas promoted falsified narratives alleging various Western countries’ support for the MEK.\nWe have previously reported on the suspected Iran-nexus ZEROCLEAR and DUSTMAN wipers, which have reportedly targeted entities in Bahrain and Saudi Arabia.\nHowever, we do note that the ransomware attack is significantly more complex than prior CHIMNEYSWEEP operations, which raises the possibility of a cross-team collaboration or other scenarios that we lack insight into at this time. We are continuing to investigate this cluster and will provide updates as we are able.\nOutlook and Implications\nMandiant has frequently reported on Iranian threat activity targeting Iranian dissidents and opposition groups abroad by cyber espionage groups such as UNC788 and malware such as SCRAPWOOD, publicly known as\nMarkiRAT\n. Additionally, numerous recent lock-and-leak operations by suspected Iran-nexus personas such as Black Shadow and Moses Staff have involved disruptive activity against primarily Israeli organizations in an attempt to embarrass them.\nThe use of ransomware to conduct a politically motivated disruptive operation against the government websites and citizen services of a NATO member state in the same week an Iranian opposition groups’ conference was set to take place would be a notably brazen operation by Iran-nexus threat actors. As negotiations surrounding the Iran nuclear deal continue to stall, this activity indicates Iran may feel less restraint in conducting cyber network attack operations going forward. This activity is also a geographic expansion of Iranian disruptive cyber operations, conducted against a NATO member state. It may indicate an increased tolerance of risk when employing disruptive tools against countries perceived to be working against Iranian interests.\nTechnical Annex A:\nROADSWEEP\nRansomware\nROADSWEEP is a newly discovered ransomware tool, which upon execution will enumerate files on the device and encrypts the content in blocks using RC4. Window API names, malware configuration parameters, and the basis of a ransomware note are RC4 encrypted within ROADSWEEP. During execution, ROADSWEEP will decrypt these encrypted strings and dynamically resolve necessary imports.\nGoXml.exe (MD5: bbe983dba3bf319621b447618548b740)\nROADSWEEP disruptive payload\nCompiled on 2016/04/30 17:08:19\nROADSWEEP requires four command line arguments to execute correctly, otherwise ROADSWEEP will produce a message box and halt execution. Upon successful execution, ROADSWEEP creates the following global mutex:\nabcdefghijklmnoklmnopqrstuvwxyz01234567890abcdefghijklmnopqrstuvwxyz01234567890\nFollowing initialization, ROADSWEEP will begin resolving the necessary APIs using the Windows GetProcAddress API. The function names are encrypted using RC4 with the hardcoded key \"8c e4 b1 6b 22 b5 88 94 aa 86 c4 21 e8 75 9d f3\".\nROADSWEEP contains multiple embedded scripts which are used to either execute additional commands or to remove itself from the victim’s device. These scripts are never written to disk, instead ROADSWEEP will create a new command prompt (cmd.exe), then send these commands to the process with a pipe. The scripts are embedded within the binary as RC4 encrypted blocks and are decrypted at runtime by the payload. The first script decrypted by ROADSWEEP is responsible for disabling settings like SystemRestore and Volume Shadow Copies, along with disabling critical services and processes.\nFigure 5: Embedded script responsible for disabling system settings and processes\nROADSWEEP also decrypts the following script, which is used to delete itself after execution:\nping 1.1.1.1 -n 1 -w 3000 > Nul & Del /f /q \"%s\"\nNext, ROADSWEEP extracts configuration values that are RC4 encrypted and embedded within the binary itself. The first is a list of extensions that should be avoided when the encryption occurs:\n.exe\n.dll\n.sys\n.lnk\n.lck\nROADSWEEP also decrypts the filename for the ransomware note, \"How_To_Unlock_MyFiles.txt\" (MD5: 44d1c75815724523a58b566d95378825) and the note itself as shown in Figure 1.\nAfter creating the file, the encryption key that is used to encrypt each file is computed. The key is derived through producing a random data stream using the algorithm shown in Figure 6, then hashing this value with MD5 and using this as an RC4 key.\nFigure 6: Key generation algorithm\nROADSWEEP then encrypts this key with an embedded RSA public key and proceeds to format the ransomware message by appending the Base64 encoded and encrypted “recovery key” to the message itself. The Base64 encoding uses a custom alphabet of \"wxyz0123456789.-JKLMNOPghijklmnopqrstuvQRSTUVWXYZabcdefABCDEFGHI\".\nFigure 7: ROADSWEEP recovery key encryption and ransom note formatting\nNext, ROADSWEEP enumerates all logical drives on the victim's device and checks whether the drive is one of the following:\nDRIVE_REMOVABLE\nDRIVE_FIXED\nDRIVE_REMOTE\nDRIVE_CDROM\nFigure 8: Drive selection and wiper thread creation\nFor each discovered drive, ROADSWEEP will initialize a new thread which is responsible for encrypting all files within that drive. This thread enumerates the file system using the Windows FindFirstFileW and FindNextFileW APIs. For each root directory, a ransomware note is created with the content and filename noted above.\nFollowing this, ROADSWEEP will check whether the files within the directory match the extracted extension list, if they do not the file is encrypted. The encryption process takes place by renaming the file with the “.lck” extension. ROADSWEEP then takes the creation time, last access time, and last write time for the file and stores these internally. These values are then used after the wipe to preserve the file times, although the purpose of this is currently unknown.\nROADSWEEP will then open the file and compute the size using the GetFileSize API. Then by chunking the file’s content into blocks of 0x100000, ROADSWEEP will read in the data, encrypt the chunk using RC4, and then overwrite the file to disk. This is completed until the entire file is overwritten.\nFollowing this, the aforementioned self-delete script is executed and the process exits.\nTechnical Annex B:\nZEROCLEAR\nVariant\nWe identified a ZEROCLEAR payload which takes in command line arguments from the operator and results in corruption of the file system using the RawDisk driver.\ncl.exe (MD5: 7b71764236f244ae971742ee1bc6b098)\nZEROCLEAR disruptive payload\nCompiled on 2022/07/15 13:26:28\nThe first command line argument must be one of the following:\n\"wp\" (default) – Wipes the disk using the ElDos driver, this expects the driver to be running for the wiper activity to occur.\n\"in\" – Installs and starts the driver named rwdsk.sys, which is expected to be located in the same directory as ZEROCLEAR.\n“un” – Uninstalls the driver named rwdsk and deletes the file on disk.\nThe second argument is the drive letter that the operator wants to corrupt, previous variants of ZEROCLEAR only wiped the system drive, determined from calling the GetSystemDirectoryW API.\nZEROCLEAR then opens a handle to the RawDisk driver by opening a handle to the following:\n\"\\\\?\\RawDisk3<arg2>#B4B615C28CCD059CF8ED1ABF1C71FE03C0354522990AF63ADF3C911E2287A4B906D47D\"\nIt then computes the disk size using the Windows IOCTL_DISK_GET_DRIVE_GEOMETRY_EX, IOCTL_DISK_GET_DRIVE_GEOMETRY and IOCTL_DISK_GET_LENGTH_INFO DeviceIoControl calls. The ElDos driver is used to overwrite the data with the value \"0\".\nTechnical Annex C:\nCHIMNEYSWEEP\nBackdoor\nWhile Mandiant was unable to uncover the infection vector for CHIMNEYSWEEP, we note that the dropper has a valid digital signature. In addition to dropping the CHIMNEYSWEEP installer, this dropper also contains either an Excel or Word document or an MP4 video file.\nThe dropper is a signed version of a Windows Cabinet self-extracting file, which is signed by the now revoked certificate \"Atheros Communications Inc.\" As of 2022-07-28, the certificate used in the ROADSWEEP campaign has not been revoked. Historically we have seen APT41 also use this signature, although as noted by\nDUO\nthe password for this certificate was widely available. The threat actor’s choice of signing certificate and dropper is likely based on the fact the legitimate Atheros certificate was used to distribute legitimate drivers using the legitimate dropper. This indicates the threat actors have a high degree of operational security.\nUpon execution, the self-extracting tool finds the resource named “Cabinet”, drops it to disk, and then executes a process named unpack.exe.\nCHIMNEYSWEEP Samples\nUNAVAILABLE (MD5: df9ab47726001883b5fcf58b56b34b41)\nCHIMNEYSWEEP backdoor\nInstalled by unpack.exe (MD5: 8c8bbe3a4a23cd4cc96c12af5fb1199b)\nContained in wextract.exe.mui (MD5: 19068e8228b6b8f5528489fa70779b2b)\nCompile time: 2021/07/26 13:39:17\nC&C servers:\ntelegram-update[.]com\navira[.]ltd\nwindowsupadates[.]com\nAppxProviders.dll (MD5: f3c977830bf616b9061d7aee5ce0b2f2)\nCHIMNEYSWEEP backdoor\nCompile time: 2021/07/26 13:39:17\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nAppxProviders.dll (MD5: 7f6db4493c6a76eb44534306291ea85f)\nCHIMNEYSWEEP backdoor\nCompile time: 2021/07/26 13:39:17\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nAppxProviders.dll (MD5: 3a1033cb1eb06c2cd5e91c539cf8a519)\nCHIMNEYSWEEP backdoor\nCompile time: 2021/07/26 13:39:17\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nUNAVAILABLE (MD5: 23643b7bd48a200889a4613a0e0a86e4)\nCHIMNEYSWEEP backdoor\nInstalled by: UNAVAILABLE (MD5: 49d72f9212d5653f5be9f764d8c9df24)\nCompile time: 2021/06/11 22:53:53\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nUNAVAILABLE (MD5: 9c09d147dfbc98d5e6e051fe1ed0033d)\nCHIMNEYSWEEP backdoor\nInstalled by unpack.exe (MD5: 38e0fa41e9519d4783766992c203e794)\nCompile time: 2020/01/25 18:11:10\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nUNAVAILABLE (MD5: 5cc183702fae8cc23a55037c1efab5e5)\nCHIMNEYSWEEP backdoor\nInstalled by UNAVAILABLE (MD5: 92c61e3047297136701c25deb658b35a)\nCompile time: 2020/09/21 11:44:32\nC&C servers:\ntelegram-update[.]com\navira.ltd\nwindowsupadates[.]com\nssv.dll (MD5: 77a369e5e49e7e62d8eef2c00cd02950)\nCHIMNEYSWEEP backdoor\nCompile time: 2018/10/08 17:28:39\nC&C servers:\ncloud-avira[.]com\npgp.eu[.]com\nserver-avira[.]com\nskype.se[.]net\nuk2privat[.]com\nupdate-pgp[.]com\nExecution\nAfter being dropped by the dropper, the installer is executed. The installer, some of which are padded with null bytes (0x00) to inflate their size, is responsible for deploying an embedded executable to disk and then executing the backdoor itself. The installer initially drops the payload as “m.d” in the covert store (\"C:\\ProgramData\\Microsoft Installer{EA2C6B24-C590-457B-BAC8-4A0F9B13B5B8}\\Force\"). Some of the installers forge the dropped file’s CreationTime, LastAccessTime, and LastWrite time from C:\\Windows\\System32\\smss.exe\nThe installer then executes the “Alloc” export which checks whether the device is currently running\nDeepFreeze by Faronics\n, although this is not applicable for the samples analysed by Mandiant. If the process name contains “creensaver.”, the backdoor will write the image to %SYSTEM32%\\Slui and then execute a task named \"\\\\Microsoft\\\\Windows\\\\License Manager\\\\LicenseExchange\\\". Alloc ultimately calls the Control_Provider export, which will initiate the backdoor.\nThe main functionality is provided in the next export called by the installer, “RatingSetupUI”. This export is responsible for all the command-and-control (C&C) interactions and backdoor capabilities.\nThe last two exports are related to the update process. “Control_Provider” manages the update process whereas “Telephon” executes the “Control_Provider” function.\nIf the backdoor is not running as an administrator, the backdoor may use embedded payloads to escalate privileges. A mutex named “rerunadmn” is used internally by the backdoor and the two RC4 encrypted payloads are extracted. The first payload is a .NET loader, which loads the second payload and calls the type \"vjp5ZPP9AidVjXxofy\" and method \"s7tajdxvX”.  The loader (MD5:\n779940f675ff4ab4e8cab7a1b7cf5d3c\n) will first enumerate the loaded .NET modules looking for the above class and methods. If they exist, it will execute that module. If the module is not loaded, the assembly is loaded and then executed in memory. The backdoor will then pass through the string “AD” if the payload is already executing as Administrator or the path to a temporary file on disk, directly to the loaded .net module. This temporary file is created by writing the content of the Software\\AppDataLoad\\GLX\\aex and writing the content to the Windows %TEMP% directory with the name APPX.<random_values>.tmp. This file is a copy of the backdoor itself. If the payload can’t resolve the export CP from the loader, it reverts to invoking PowerShell with the following command, passing in the path to the second payload, the type and method and either AD or the path to the second module:\n[Reflection.Assembly]::LoadFile(\\\"%s\\\")\\n$i=\\\"\\\"\\n$r=[%s]::%s(\\\"%s\\\",[ref] $i)\\necho $r,$i\\n\nExecution will then proceed within the second payload (MD5:\n3633b3d69060a5882656b69f81655f0a\n), responsible for ensuring that the payload is running with administrator privileges. This payload is obfuscated by reactor and contains encrypted strings used throughout the execution. Upon execution, the payload will create the mutex “rerunadmn” and “subttoadmn”. The module utilises the following techniques to execute the payload as administrator:\nMakes use of the Windows “SilentCleanup” scheduled task. This task executes the executable running in %windir%\\system32\\cleanmgr.exe, and the payload uses the Windows Registry Environment key to change the %windir% variable to point to c:\\Windows. Next, the payload creates a new System32 folder and copies an embedded payload called cleanmgr.exe (MD5: 779940f675ff4ab4e8cab7a1b7cf5d3c) into this folder , alongside a .cfg file with the content “slc”. Following this, the task is executed. This technique is similar to a technique within\nMetasploit called bypassuac_silentcleanup.\nMakes use of the windows CMSTP.exe binary to install a malicious Microsoft Connection Manager Profile on the device. This technique drops cln.vbs to the c:\\windows\\temp folder (MD5: 7a77c2930f0457ed2dd622e9739c7d3d), then creates a .ini file for the Ethernet service. Within this ini file, the payload contains two RunPreSetupCommandsSection values, one for the payload itself, and the second for executing the cln.vbs script. The legitimate cmstp.exe will then be executed on the host which executes the backdoor and then the clean-up script. This technique is identical to a technique made public in 2017 by\nOddvar Moe\n.\nCHIMNEYSWEEP has the following major functionality:\nScreenshot collection: Takes screenshots of the compromised device on a timer and stores to disk or can be tasked to take a screenshot and upload.\nFile collection and listing: Monitors for new removable drives and performs directory listing on demand, enumerates directories for files that match a set list, and can be tasked to upload a file to the command-and-control server.\nKeylogging: Monitors the content of the clipboard and performs key logging to disk.\nReverse shell: Contains a reverse shell which can be utilised by the attacker.\nInitial configuration format\nThe backdoor contains settings that are found either encrypted within the payload or stored in the registry (Software\\AppDataLow\\GLX\\Setting). The values stored in the registry will be provided from the update mechanism. The configuration is split using the tags {BEGIN} and &{END}, and each value within the settings are referenced by an integer. For extracting the C&C values, the parser stores a reference to values 30-39 where each reference can be a different C&C and URI in order.\nFigure 9: Example C&C configuration\nBased on our analysis we assess that the IDs correspond to the following settings:\nId\nPurpose\n1\nPerform file collection\n2\nPerform directory listing of new drives\n3\nPerform key logging\n4\nMonitor clipboard data\n5\nBoolean value as to whether the actor should take screenshots\n6\nThe timeout value between each screenshot\n7\nDefault JPEG quality for BMP2JPGpourVBFrance export\n8\nExecute system information command\n9-29\nMissing\n30-39\nC&C information\n40\nFile collection config\nTable 1: Configuration keys\nNetwork communications and commands\nDuring the initialisation of CHIMNEYSWEEP, a thread is created which makes HTTP GET requests to https://api.telegram.org/<random_value>. The response is checked for the string \"{\"ok\":false,\" and if that string is present, the threat actor attempts to use Telegram for C&C communications.\nThe threat actor used the following Telegram bots:\nURI Path\nbot username\nbot real name\nchannel id\nbot661217919:AAG9PrAybrKF5y8HxMA14THNZtWXw5Sv4w\nnet21007bot\nnet21007\n-1001262963819\nbot692407219:AAFlfj9N3gx7vCJlsFi3Ej0qzZgpL8CNmj0\nnet11007bot\nnet11007\n-1001188059110\nTable 2: Telegram channels by actor\nThese Telegram channels appear to have been in use by the threat actor for a significant period and have messages in the hundreds of thousands which relate to individual tasks. The backdoor uses\nTelegram’s GetUpdates API endpoint\n, which returns a list of messages for the bot. The backdoor then parses this data to execute specific commands, download additional payloads, or to create a reverse shell. Data sent and received by the Telegram channel are encoded using Base64 and the same alphabet as ROADSWEEP.\nWithin the context of Telegram, CHIMNEYSWEEP uses a unique identifier for the victim based on the computer name and username prepended by TL. This ID is used for filtering commands for the specific device:\nTL_<computer_name>-<user_name>\nFollowing the victim identifier, the backdoor uses the string 1 to indicate a task for the update process and 2 to indicate a command to execute on the host.\nIf Telegram is not available, the threat actor communicates to threat actor-owned infrastructure. This infrastructure is embedded within the payload and may include one or multiple of the following:\nhttp://skype.se.net/cm.php\nhttp://update-real.com/cm.php\nhttp://windowsupadates.com/cm.php\nhttp://update-pgp.com/cm.php\nhttp://uk2privat.com/cm.php\nhttp://server-avira.com/cm.php\nhttp://pgp.eu.com/cm.php\nhttp://cloud-avira.com/cm.php\nhttp://telegram-update.com/cm.php\nhttp://avira.ltd/cm.php\nThe C&C communication protocol consists of several HTTP requests to the server using the argument “do” to specify the command id and “arg” to transfer associated data. Communication to these servers is done with a specific User-Agent, which includes the victim's computer name and username in the following format:\n<status_code>:---:<Computer_Name>-<User_Name>:---:init:---:www:---:MNEW\nUpon initialization, the backdoor will create two networking threads, one for managing updates and the second for managing tasking:\nCommand Id\nPurpose\nResponse\nStart the plugin update process\nUpdates settings within the backdoor like the current C&C for this communication channel or the settings in the registry\n2\nUpdate the core backdoor\nRC4 encrypted executable, which is written to the disk, time stomped to be between 2010-2021, then executed. The backdoor uses the mutex \"runupdate\" before executing the executable, then after the process returns, will check for the mutex \"runupdateok\". If this mutex exists, the backdoor instance who requested the update is terminated.\n20\nDownload and execute a file\nRC4 encrypted data which is written to disk, then executed.\n22-28\nDownload additional plugins\nRC4 encrypted data which will be written to registry values. The purpose of these plugins is not fully understood, although Mandiant were able to ascertain that \"p22jpd\" is used for the screenshot converter.\nTable 3: Update communications\nUpdate process\nCHIMNEYSWEEP can update itself by downloading an executable. Mandiant was unable to obtain a copy of this updater. However, this update mechanism likely executes the Control_Provider export. This export establishes a number of mutexes including: runupdateok, baserun, heyirunadmn and corerun. The updater logic first creates the mutex runupdate, that is checked by the Control_Provider, then waits for the runupdateok mutex before killing itself.\nTasking communications\nA second thread is started to handle incoming tasking from either the C&C server or Telegram. The command effectively works by downloading a request from the server, then parsing this request into a format that is then parsed by CHIMNEYSWEEP. Payloads are delivered either using the custom Base64 algorithm for Telegram, or in plain text for the standard C&C server.\nMandiant was unable to identify each individual field used and believe these may be reserved for future, or used with historic iterations of the backdoor.\nCommands are made up of 12 distinct arguments encased in square braces. As shown in Figure 10:\nFigure 10: Tasking command structure\nThe backdoor checks for the existence of the \"[Z]\", and that the string ends with a \"]\". The arguments are then passed back to the main C&C loop. The timeout is the value in seconds that is slept prior to executing any command on the system.\nFigure 11: CHIMNEYSWEEP command parsing\nThe following commands are supported in variants analysed by Mandiant:\nCommand Id\nPurpose\nResponse\n40\nExecute a task on host\nSee Tasking\n41\nUpload a screenshot\nUploads a sc\n200\nUpdate screenshot settings and upload a screenshot\nTakes a screenshot using either the b.j file from the covert store or the Windows APIs, store the screenshot on disk then upload to the C2.\nTable 4: Tasking communication task list\nTasking\nCHIMNEYSWEEP enables two distinct routes to execute commands on the box, a reverse shell and an interactive custom command prompt. In addition to this, the backdoor enables the threat actor to reboot or shutdown the system or logoff the current user.\nCommand\nAction\n100\nStart the custom command prompt\n101\nStart a reverse shell\n102\nShutdown the system using shutdown /s /t 0 /f\n103\nReboot the system using shutdown /r /t 0 /f\n104\nLogoff the current user using shutdown /l /f\nTable 5: Command options for local task\nFigure 12: Command options\nFor both shells, the command creates a socket to the address and port in the original packet. For the reverse shell, a cmd.exe process is started with the pipes set to the socket. A packet is sent to the C&C server to inform it that a shell is starting. This packet consists of the following string \"CSP><computer_identifier>>\", upon termination of the shell by the user, the string \"DC><computer_idenitifer>>\" is sent.\nThe custom command prompt allows the following commands:\nCS - Used to indicate the start of a command session along with the computer_identifier\nLD - List drivers\nLP - list files in path\nLPG - Not implemented\nSF - Opens a file, returns the file size\nSFG - Opens the file and uploads the content in chunks of 0x400 bytes\nRF - Retrieves a file and writes to disk\nREN - Rename a file\nDEL - Delete a file\nDELF - Delete a directory\nCRTD - Creates a directory\nEXEC - Executes a command on disk\nDC - Disconnects the shell\nHI - Return \"OOK>\"\nScreenshot function\nCHIMNEYSWEEP can be configured to take the screenshots and if the JPEG converter plugin (stored in the p22jpd registry value) is present, convert the images to JPEG. The JPEG settings can be configured by the threat actor in the request as discussed above. Screenshots are taken using the Windows APIs and written to disk in the covert store with the name APPX.%x%x%x%x%x.tmp, where each %x is a random value.\nDepending on whether the JPEG plugin exists, CHIMNEYSWEEP will either copy the temporary file into the requested file, or using the plugin, convert the bitmap into a JPEG as defined by the command.\nThe output value is then either uploaded to Telegram or the C&C server using command 41. Mandiant was able to obtain a JPEG plugin with the MD5 hash 87574fa34cfbe592d6097b8d36e00313.\nFigure 13: Example C&C tasking to collect a screenshot\nSys info commands\n@echo off\n@CHCP 65001\n@set t=\"%cd%\\ni\"\n@set f=\"%cd%\\i1\"\n@cd %SystemRoot%\\system32\n@echo {{WMIC_AntiVirusProduct}}>%t%\n@wmic /failfast:on /append:%t% /namespace:\\\\root\\SecurityCenter2 path AntiVirusProduct get /value\n@echo {{WMIC_AntiSpywareProduct}}>>%t%\n@wmic /failfast:on /append:%t% /namespace:\\\\root\\SecurityCenter2 path AntiSpywareProduct get /value\n@echo {{WMIC_FirewallProduct}}>>%t%\n@wmic /failfast:on /append:%t% /namespace:\\\\root\\SecurityCenter2 path FirewallProduct get /value\n@echo {{WMIC_OS}}>>%t%\n@wmic /failfast:on /append:%t% OS get /value\n@echo {{WMIC_TIMEZONE}}>>%t%\n@wmic /failfast:on /append:%t% TIMEZONE get /value\n@echo {{WMIC_LOGON}}>>%t%\n@wmic /failfast:on /append:%t% LOGON get /value\n@echo {{WMIC_DESKTOP}}>>%t%\n@wmic /failfast:on /append:%t% DESKTOP get /value\n@echo {{WMIC_DESKTOPMONITOR}}>>%t%\n@wmic /failfast:on /append:%t% DESKTOPMONITOR get /value\n@echo {{WMIC_BASEBOARD}}>>%t%\n@wmic /failfast:on /append:%t% BASEBOARD get /value\n@echo {{WMIC_BIOS}}>>%t%\n@wmic /failfast:on /append:%t% BIOS get /value\n@echo {{WMIC_CPU}}>>%t%\n@wmic /failfast:on /append:%t% CPU get /value\n@echo {{WMIC_SOUNDDEV}}>>%t%\n@wmic /failfast:on /append:%t% SOUNDDEV get /value\n@echo {{WMIC_LOGICALDISK}}>>%t%\n@wmic /failfast:on /append:%t% LOGICALDISK get /value\n@echo {{WMIC_CDROM}}>>%t%\n@wmic /failfast:on /append:%t% CDROM get /value\n@echo {{WMIC_PRINTERCONFIG}}>>%t%\n@wmic /failfast:on /append:%t% PRINTERCONFIG get /value\n@echo {{WMIC_USERACCOUNT}}>>%t%\n@wmic /failfast:on /append:%t% USERACCOUNT get /value\n@echo {{WMIC_SHARE}}>>%t%\n@wmic /failfast:on /append:%t% SHARE get /value\n@echo {{WMIC_STARTUP}}>>%t%\n@wmic /failfast:on /append:%t% STARTUP get /value\n@echo {{WMIC_PROCESS}}>>%t%\n@wmic /failfast:on /append:%t% PROCESS get /value\n@echo {{WMIC_SERVICE}}>>%t%\n@wmic /failfast:on /append:%t% SERVICE get /value\n@echo {{WMIC_SYSDRIVER}}>>%t%\n@wmic /failfast:on /append:%t% SYSDRIVER get /value\n@echo {{WMIC_PAGEFILE}}>>%t%\n@wmic /failfast:on /append:%t% PAGEFILE get /value\n@echo {{WMIC_PAGEFILE}}>>%t%\n@wmic /failfast:on /append:%t% PAGEFILE get /value\n@echo {{SYSTEMINFO}}>>%t%\n@SYSTEMINFO>>%t%\n@echo {{Reg_Uninstall}}>>%t%\n@REG QUERY \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"  /s>>%t%\n@echo {{Reg_TerminalServerClient}}>>%t%\n@REG QUERY \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\"  /s>>%t%\n@echo {{BOOTCFG}}>>%t%\n@BOOTCFG>>%t%\n@echo {{IPCONFIG/All}}>>%t%\n@IPCONFIG /ALL>>%t%\n@echo {{whoami}}>>%t%\n@whoami>>%t%\n@echo {{net user /domain}}>>%t%\n@net user /domain>>%t%\n@echo {{net user}}>>%t%\n@net user>>%t%\n@echo {{net user Administrator}}>>%t%\n@net user Administrator>>%t%\n@echo {{net localgroup administrators}}>>%t%\n@net localgroup administrators>>%t%\n@echo {{net group /domain }}>>%t%\n@net group /domain>>%t%\n@echo {{net group \"domain admins\" /domain}}>>%t%\n@net group \"domain admins\" /domain>>%t%\n@echo {{net view}}>>%t%\n@net view>>%t%\n@echo {{net use}}>>%t%\n@net use>>%t%\n@echo {{net share}}>>%t%\n@net share>>%t%\n@echo {{route print}}>>%t%\n@route print>>%t%\n@echo {{net localgroup}}>>%t%\n@net localgroup>>%t%\n@echo {{net group \"Exchange Trusted Subsystem\" /domain}}>>%t%\n@net group \"Exchange Trusted Subsystem\" /domain>>%t%\n@echo {{net accounts /domain}}>>%t%\n@net accounts /domain>>%t%\n@echo {{net accounts}}>>%t%\n@net accounts>>%t%\n@echo {{netstat -an}}>>%t%\n@netstat -an>>%t%\n@echo {{set}}>>%t%\n@set>>%t%\n@echo {{tasklist}}>>%t%\n@tasklist>>%t%\n@echo {{dir c:\\ }}>>%t%\n@dir c:\\ >>%t%\n@echo {{dir d:\\ }}>>%t%\n@dir d:\\ >>%t%\n@echo {{dir e:\\ }}>>%t%\n@dir e:\\ >>%t%\n@echo {{dir f:\\}}>>%t%\n@dir f:\\>>%t%\n@echo {{dir g:\\}}>>%t%\n@dir g:\\>>%t%\n@echo {{dir Desktop}}>>%t%\n@dir %appdata%\\..\\..\\Desktop>>%t%\n@echo {{dir C:\\Users}}>>%t%\n@dir C:\\Users>>%t%\n@echo {{dir \"C:\\Program Files\"}}>>%t%\n@dir \"C:\\Program Files\">>%t%\n@echo {{dir \"C:\\Program Files (x86)\"}}>>%t%\n@dir \"C:\\Program Files (x86)\">>%t%\n@echo {{dir C:\\ProgramData}}>>%t%\n@dir C:\\ProgramData>>%t%\n@echo {{tracert -d -4 -w 1500 8.8.8.8}}>>%t%\n@tracert -d -4 -w 1500 8.8.8.8>>%t%\n@echo {{ping 8.8.8.8}}>>%t%\n@ping 8.8.8.8>>%t%\n@echo {{ping gitlab.com}}>>%t%\n@ping gitlab.com>>%t%\n@echo {{ping mail.google.com}}>>%t%\n@ping mail.google.com>>%t%\n@echo {{ping google.com}}>>%t%\n@ping google.com>>%t%\n@echo {{ping mf.local}}>>%t%\n@ping mf.local>>%t%\n@echo {{DATE-TIME}}>>%t%\n@date /T>>%t%\n@time /T>>%t%\n@echo {{END}}>>%t%\n@del /q /f %f%\n@more<%t%>%f%\n@del /q /f %t%\n@exit\nMITRE ATT&CK Techniques\nID\nTechnique\nT1007\nSystem Service Discovery\nT1012\nQuery Registry\nT1027\nObfuscated Files or Information\nT1033\nSystem Owner/User Discovery\nT1055\nProcess Injection\nT1057\nProcess Discovery\nT1070.004\nFile Deletion\nT1070.006\nTimestomp\nT1082\nSystem Information Discovery\nT1083\nFile and Directory Discovery\nT1087\nAccount Discovery\nT1112\nModify Registry\nT1113\nScreen Capture\nT1134\nAccess Token Manipulation\nT1489\nService Stop\nT1497.001\nSystem Checks\nT1518\nSoftware Discovery\nT1543.003\nWindows Service\nT1569.002\nService Execution\nT1622\nDebugger Evasion\nYara Rules\nrule M_Disrupt_ROADSWEEP_1\r\n{\r\n    meta:\r\n        author = \"Mandiant\"\r\n        description = \"Identifies the encryption key used within ROADSWEEP\"\r\n    strings:\r\n        $ = {C6 45 D5 E4 C6 45 D6 B1 C6 45 D7 6B C6 45 D8 22 C6 45 D9 B5 C6 45 DA 88 C6 45 DB 94 C6 45 DC AA C6 45 DD 86 C6 45 DE C4 C6 45 DF 21 C6 45 E0 E8 C6 45 E1 75 C6 45 E2 9D C6 45 E3 F3 C7 44 24 10 00 00 00 F0}\r\n    condition:\r\n        all of them\r\n}\r\nrule M_Disrupt_ZEROCLEAR_1 { \r\n    meta: \r\n        author = \"Mandiant\" \r\n        description = \"Identifies code sequences in ZEROCLEAR\"\r\n    strings:\r\n        $ = \"B4B615C28CCD059CF8ED1ABF1C71FE03C0354522990AF63ADF3C911E2287A4B906D47D\" wide\r\n        $ = \"wp starts!\"\r\n        $ = \"un start!\"\r\n        $ = \"in start!\"\r\ncondition:\r\n        all of them \r\n}\r\nrule M_Backdoor_CHIMNEYSWEEP_1\r\n{\r\n    meta:\r\n        author = \"Mandiant\"\r\n        description = \"Detects strings found in CHIMNEYSWEEP\"\r\n    strings:\r\n        $ = \"%sAPPX.%x%x%x%x%x.tmp\"\r\n        $ = \"rerunadmn\"\r\n        $ = \"runupdate\"\r\n        $ = \"runupdateok\"\r\n        $ = \"baserun\"\r\n        $ = \"heyirunadmn\"\r\n        $ = \"subttoadmn\"\r\n        $ = \"ttrundll\"\r\n        $ = \"{\\\"ok\\\":false,\"\r\n        $ = \"TL_%s-%s\"\r\n        $ = \"|**|Net1NOFILE|**|\"\r\n        $ = \"%s:---:%s-%s:---:%s:---:www:---:MNEW\"\r\n    condition:\r\n        uint16(0) == 0x5A4D and 8 of them\r\n}\r\nimport \"pe\"\r\nrule M_Backdoor_CHIMNEYSWEEP_2\r\n{\r\n    meta:\r\n        author = \"Mandiant\"\r\n        description = \"Detects encrypted data found in CHIMNEYSWEEP\"\r\n    strings:\r\n        $key = {C6 45 D5 E4 C6 45 D6 B1 C6 45 D7 6B C6 45 D8 22 C6 45 D9 B5 C6 45 DA 88 C6 45 DB 94 C6 45 DC AA C6 45 DD 86 C6 45 DE C4 C6 45 DF 21 C6 45 E0 E8 C6 45 E1 75 C6 45 E2 9D C6 45 E3 F3 C7 44 24 10 00 00 00 F0}\r\n        $encoded_config = {FA c0 c7 e5}\r\n        $encoded_bot = {AE E0 ED D6}\r\n    condition:\r\n        uint16(0) == 0x5A4D and all of them and (pe.exports(\"RatingSetupUI\") or pe.exports(\"A\"))\r\n}\nPosted in\nThreat Intelligence\nSecurity & Identity\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
              "recursive_crawls": [
                {
                  "url": "https://cloud.google.com/blog/topics/threat-intelligence/information-operations-surrounding-ukraine",
                  "text": "The IO Offensive: Information Operations Surrounding the Russian Invasion of Ukraine | Mandiant | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nThe IO Offensive: Information Operations Surrounding the Russian Invasion of Ukraine\nMay 19, 2022\nMandiant\nWritten by: Alden Wahlstrom, Alice Revelli, Sam Riddell, David Mainor, Ryan Serabian\nThe recent phase of Russian aggression toward Ukraine, manifested by Russia’s full-scale invasion, has flooded the information environment with disinformation promoted by a full spectrum of actors. Concerted information operations have proliferated, ranging from cyber-enabled information operations, including those that coincided with disruptive and destructive cyber threat activity, to campaigns leveraging coordinated and inauthentic networks of accounts to promote fabricated content and desired narratives across various social media platforms, websites, and forums.\nWhile the full extent of this activity has yet to be seen, more than two months after the start of the invasion, Mandiant has identified activity that we attributed to information operations campaigns conducted by actors we judge to be operating in support of the political interests of nation-states such as Russia, Belarus, China, and Iran, including ongoing campaigns that we have tracked for years. This report examines a slice of this activity, highlighting significant information operations Mandiant has observed in our work responding to the invasion and presenting our early analysis of those events.\nInformation Operations Aligned with Russian Interests Concurrent with Disruptive and Destructive Cyber Threat Activity\nMandiant identified information operations aligned with Russian political interests that occurred concurrently with disruptive and destructive, likely Russian sponsored cyber threat activity in the weeks immediately preceding and following the start of the invasion, including incidents involving the deployment of wiper malware disguised as ransomware (Table 1). Cyber-enabled information operations by nature require access to diverse skillsets to support different operational components, which varies based on the complexity of the operation. While we cannot link these operations to the concurrent disruptive and destructive activity, this limited pattern of overlap may suggest that some of the actors behind information operations observed in this conflict are linked to groups with extensive capabilities.\nDate\nInformation Operation\nConcurrent Disruptive and Destructive Activity\nJan. 14, 2022\nMultiple Ukrainian government websites, including that of the Ministry of Foreign Affairs, were defaced with a message in Russian, Ukrainian, and Polish claiming that data had been deleted from government servers and would be released.\nThe defacements likely coincided with the January deployment of destructive tools\nPAYWIPE\n, an MBR wiper disguised as ransomware, and the\nSHADYLOOK\nfile corrupter against Ukrainian government and other targets.\nFeb. 23, 2022\nDozens of Ukrainian government websites were defaced with the same image displayed in the Jan. 14 incident.\nThis incident coincided with destructive attacks against Ukrainian government targets using the\nNEARMISS\nmaster boot record (MBR) wiper and PARTYTICKET wiper disguised as ransomware.\nMarch 16, 2022\nAn information operation targeting Ukraine promoted a fabricated message alleging Ukraine's surrender to Russia via the suspected compromise and defacement of the Ukraine 24 website and news ticker in a Ukraine 24 TV broadcast with a written message, as well as via an artificial intelligence (AI)-generated \"deepfake\" video impersonating Ukrainian President Zelenskyy delivering that same text.\nOn the same day, Mandiant identified the\nJUNKMAIL\nwiper targeting a Ukrainian organization. The malware was configured via a scheduled task to execute approximately three hours before Zelenskyy was scheduled to deliver a speech to the U.S. Congress.\nTable 1: Significant information operations that occurred concurrent with other disruptive or destructive cyber threat activity\nRussian and Belarusian Information Operations Include Cyber-Enabled Operations, Use of Established Assets\nRussian and Belarusian information operations actors and campaigns, including those that have historically been linked to cyber threat activity such as hack-and-leak operations, have engaged in activity surrounding the invasion that is consistent with their previously established motives. Their use of developed campaign infrastructure, including in some instances the refocusing of established assets, demonstrates how years-long efforts of Russian, pro-Russian, and Belarusian information operations targeting Ukraine and the broader region have been leveraged to address emerging security interests. In addition to known campaigns, we have also identified information operations activity promoting pro-Russian content on the invasion that we have not attributed to a previously observed campaign or actor.\nFigure 1: Vectors leveraged by identified Russia-aligned actors and campaigns in observed information operations surrounding the Russian invasion of Ukraine. \"Russia-aligned\" refers to Russian, Belarusian, and pro-Russia activity; this graphic does not reflect activity pre-dating this conflict\nAPT28\n: Telegram channels that the Security Service of Ukraine (SBU) has attributed as information operations assets of the 85th Main Special Service Center of the Russian General Staff’s Main Intelligence Directorate (GRU), the same organization to which the U.S. and UK governments\nattributed APT28 activity\n, have continued to post content pertaining to the current conflict. These channels were active prior to the invasion, and while we were unable to independently confirm the SBU’s attribution, we note that the channels’ activity includes promoting content that appears intended to weaken Ukrainians’ confidence in their government and its response to the invasion. The content also appears intended to undermine support for Ukraine from its Western partners, interspersed with more seemingly benign posts relaying apolitical content or news reporting.\nAPT28\nhas an extensive history\nof involvement in information operations, ranging from hack-and-leak operations to disruptive activity. Prominent operations involving APT28 have included compromises of the U.S. Democratic National Committee (DNC) and U.S. Democratic Congressional Campaign Committee (DCCC) in 2016, documents from which were subsequently leaked by the false hacktivist persona Guccifer 2.0, and the 2014 compromise, defacement, data leak, and data destruction of the Ukrainian Central Election Commission’s network and website.\nGhostwriter\n: A suspected\nGhostwriter\noperation in April leveraged a suspected compromised website and multiple suspected compromised or otherwise actor-controlled social media accounts to publish fabricated content to promote a narrative that appeared intended to foment distrust between Ukrainians and the Polish government. Inauthentic personas we attributed to the Ghostwriter campaign have also continued to publish and promote opinion articles criticizing NATO and its presence in the Baltic States, with increased references to Ukraine in that context. We\nhave assessed\nwith moderate confidence that Belarus is likely at least partially responsible for the Ghostwriter campaign.\nIn the weeks leading up to the invasion and subsequent weeks thereafter, we observed multiple campaigns conducted by Belarusian espionage group UNC1151 targeting European countries, including a recent spear-phishing campaign targeting Lithuania. Observed targeting associated with UNC1151 threat activity is notable, given the group’s\ntechnical support to information operations\nattributed to Ghostwriter.\nNiezależny Dziennik Polityczny (NDP)\n: Immediately following Russia’s invasion of Ukraine, we observed assets associated with NDP, an\ninformation operations campaign\ncentered around an online journal of the same name, shift toward an aggressive defense of Russian strategic interests. During this period, we observed the campaign’s concerted promotion of narratives seeded by both overt and covert sources within Russia’s propaganda and disinformation ecosystem. We do not attribute the NDP campaign to a specific actor. However, we have observed overlaps between NDP and the Ghostwriter campaign that may suggest some degree of coordination or advanced shared knowledge of operational planning between the two campaigns.\nSecondary Infektion\n: Both prior to and during the invasion, the ongoing suspected Russian influence campaign referred to as “Secondary Infektion” has continued its operations, targeting audiences with fabricated narratives that are often supported by falsified source materials, such as forged documents, correspondence, pamphlets, and screenshots, as well as counterfeit petitions and interviews. All specific Secondary Infektion activity referenced in this blog are operations that we are sharing our attribution of publicly for the first time.\nInternet Research Agency (IRA)\n: Reporting from the Russian newspaper Fontanka.ru suggested the existence of covert influence operations related to the Telegram channel “Cyber Front Z.” The channel is overtly dedicated to organizing the coordinated promotion of pro-Russia content pertaining to the invasion to audiences in Russia, Ukraine, and the West on social media (Figure 2). The Fontanka.ru report claimed that Cyber Front Z may be run by individuals linked to\nentities sanctioned by the U.S. as related to the IRA\n, and that the paid positions promoted by this Telegram channel are part of a “troll factory” that uses inauthentic personas to promote pro-Russia content on multiple platforms. We are unable to independently confirm these claims, but note that such activity is aligned with what we have previously observed from known IRA assets.\nFigure 2: Example of content posted to the Cyber Front Z Telegram channel, which it encourages its followers to post on the social media accounts of specified targets. Provided content often includes crude or offensive imagery; featured here is a meme of Ukrainian forces trapped at the Azovstal steel plant in Mariupol while a cartoon Russian soldier calls in an airstrike\nRussian Intelligence-Linked Covert Media Outlets:\nWe observed outlets that self-present as independent entities, but have been\npublicly reported\nto be linked to Russian intelligence entities, engaged in the publication and amplification of pro-Russia narratives related to the invasion. These include outlets with reported links to the Foreign Intelligence Service of the Russian Federation (SVR), Federal Security Service of the Russian Federation (FSB), and Main Directorate of the General Staff of the Armed Forces of the Russian Federation (GRU).\nRussia-Aligned “Hacktivist” Groups:\nEstablished hacktivist personas JokerDNR and Beregini have remained active in their targeting of Ukraine in the leadup to and since Russia’s invasion, including through their publication of allegedly leaked documents featuring possible personally identifiable information (PII) of Ukrainian military members. Additionally, newly established “hacktivist” groups, whose degrees of affiliation to the Russian state are yet unknown, like\nKillnet, Xaknet,\nand RahDit, have engaged in hacktivist-style threat activity in support of Russia, including distributed denial-of-service (DDoS) attacks, hack-and-leak operations, and defacements.\nObserved Pro-Russia Narratives Seek to Demoralize Ukrainians, Sow Division Between Ukraine and Western Allies, Bolster Public Perception of Russia\nDisinformation narratives promoted through concerted information operations have made an array of claims attempting to shape perceptions of the invasion and the larger geopolitical context surrounding it. Many of the narratives we have observed promoted appear intended to serve at least one of these three functions: demoralizing Ukrainians and fomenting internal unrest; dividing Ukraine from its allies; and bolstering perceptions of Russia (Figure 3). Much of this activity has targeted audiences in Ukraine and Europe. However, we have also identified information operations assets promoting messaging that we judge to be aimed at Russian domestic audiences, underscoring Russia’s need to sell the war to its own people.\nFigure 3: Observed Russia-aligned narrative themes related to Russia’s invasion of Ukraine\nDemoralize the Ukrainian Population\nWe have identified multiple narratives that appeared intended to demoralize Ukrainians and incite internal unrest within Ukraine, including false claims of the surrender of the Ukrainian government or military.\nAn information operation in March disseminated an artificial intelligence (AI)-generated “deepfake” video of Zelenskyy stating that Ukraine had surrendered to Russia, and defaced the Ukraine 24 website and news ticker in a Ukraine 24 TV broadcast with an identical message or screenshot from the deepfake video (Figure 4). Since the start of the war, other Ukrainian websites have also been defaced with messages alleging Ukraine’s surrender.\nA Secondary Infektion operation in March falsely claimed that Zelenskyy had committed suicide in the military bunker in Kyiv where he had been leading the fight against the invasion, alleging that he had been contemplating suicide due to Ukraine’s military failures.\nAnother Secondary Infektion operation from April alleged that the Azov “gang” sought vengeance against Zelenskyy for abandoning their fighters to die in Mariupol, and claimed that Azov commanders had attempted to escape the city by pretending to be civilians. (The narrative here specifically refers to Ukraine's Azov Regiment, a special operations detachment within the Ukrainian National Guard, which is itself part of a broader ultranationalist movement—segments of which have been known to espouse white nationalist rhetoric; Azov has frequently appeared in pro-Russia narratives seeking to cast the Ukrainian government, and Ukrainians more broadly, as Nazis.)\nTelegram channels attributed by Ukraine to the GRU highlighted alleged corruption and incompetence on the part of the Ukrainian government, such as claims that Ukraine was unprepared for the conflict, and that Ukrainian oligarchs had “paid Zelenskyy for the right to leave the country.”\nFigure 4: Screenshot from an artificial intelligence (AI)-generated “deepfake” video of Zelenskyy stating that Ukraine would surrender to Russia\nDivide Ukraine from Its Allies\nA recent Ghostwriter operation, which we are making our attribution of public for the first time, leveraged compromised assets to publish fabricated content promoting the narrative that a Polish criminal ring was harvesting organs from Ukrainian refugees to illegally traffic in the European Union, and that Poland’s Internal Security Agency was investigating the criminal enterprise, which was said to involve “high-ranking Polish officials.”\nOpinion articles published by suspected inauthentic personas associated with NDP promoted narratives seemingly intended to damage Polish-Ukrainian relations by creating fear, uncertainty, and doubt (FUD) surrounding Poland’s acceptance of Ukrainian refugees. These narratives included falsehoods that sought to portray the refugees as overly burdening Poland’s economy and healthcare system and to stoke fears among Polish citizens that “neo-Nazis”, or other undesirable immigrants, would begin exploiting mass border crossings to carry out attacks on Polish soil.\nThe Jan. 14 and Feb. 23 defacements of Ukrainian government websites referenced\nwar crimes\ncommitted by the \"Ukrainian Insurgent Army\" (UPA) against ethnic Poles during World War II, a theme previously observed in Russian and Belarusian information operations. For example, a November 2021 Ghostwriter operation featured a fabricated account from a retired Polish general, stating that the alleged presence of Ukrainian volunteers with far-right political leanings in Poland was “an insult” to the victims of the same war crimes.\nRecent Ukrainian- and Russian-language Secondary Infektion operations claimed that the Ukrainian and Polish governments sought to enable Polish troops to deploy in western Ukraine, a move they portrayed as anathema to the Ukrainian people. One operation in early April claimed that Poland attempted to use an alleged “provocation,” staged by Ukraine, showing Russian troops committing atrocities in Bucha to justify stationing troops in the country, while an operation in early February involved the dissemination of a map showing specific locations where Polish troops would be located, with the suggestion that those troops would occupy large swaths of Ukraine for years (Figure 5).\nObserved narratives from Telegram channels Ukraine attributed to the GRU included suggestions that the West would soon forget about and abandon Ukraine, due in part to the diversion of its attention to impending conflicts elsewhere, such as a potential war launched by the U.S. against Iran.\nFigure 5: A map disseminated in a suspected Secondary Infektion operation claimed to show specific locations where Polish troops would be stationed in western Ukraine\nBolster Perceptions of Russia\nMultiple identified narratives have appeared intended to bolster perceptions of Russia through denial and deflection, including by refuting Russian war crimes in Ukraine and making counter-allegations against Ukrainian forces.\nCyber Front Z, in its coordinated promotion of pro-Russia commentary, called on social media users to claim that Ukrainian “Nazis” forced civilians into a theater in Mariupol, which they then detonated.\nWe identified a coordinated and inauthentic network of social media accounts that promoted Russian-language messaging, including assertions that Ukrainian forces had used chemical weapons.\nThese accounts also denied the effects of the West’s response to Russia’s invasion of Ukraine, such as sanctions on Russia, and claimed that such measures had negative consequences for the West.\nPro-PRC Information Operations Campaign DRAGONBRIDGE Messaging Includes Echoes of Russian State-Promoted Narratives\nDRAGONBRIDGE\n, a pro-PRC campaign which comprises a network of thousands of inauthentic accounts across numerous social media platforms, websites, and forums that we first reported to customers in 2019, has shifted its messaging in response to the Ukraine crisis and subsequent invasion. DRAGONBRIDGE content in English and Chinese has included echoing narratives promoted by Russian state media and influence campaigns, such as alleging the existence of Pentagon-linked laboratories conducting biological weapons research in Ukraine. Notably, such echoing of narratives is not unusual, and charging the U.S. with malfeasance and interference in other countries is likewise in line with PRC political interests; we have previously observed both pro-PRC and pro-Russia information operations promoting content on the alleged involvement of U.S. biolabs in hazardous research. The campaign’s leveraging of Russia-aligned narratives on Ukraine may constitute a form of political opportunism in its continued attempts to target the U.S. and the West’s global standing.\nOn March 6, Russian Defense Ministry spokesperson Igor Konashenkov\nclaimed\nthat Russia’s military operation in Ukraine had uncovered evidence of Pentagon-linked laboratories in Ukraine conducting bioweapons research. DRAGONBRIDGE accounts subsequently amplified this claim, including allegations that U.S.-funded biolabs existed not only in Ukraine, but also around the world.\nDRAGONBRIDGE accounts also insinuated that the alleged biolabs in Ukraine were responsible for “mysterious outbreaks,” the nature of which went unexplained, and that biolabs elsewhere in the world were likewise harming local populations (Figure 6).\nFigure 6: Screenshot from DRAGONBRIDGE video insinuating a connection between the presence of a U.S. biolab in Ukraine and the occurrence of multiple “mysterious outbreaks”\nDRAGONBRIDGE messaging on the invasion also appeared to take aim at U.S. foreign policy and its relations with other countries through claims that the U.S. is self-serving in its actions and that it is an unreliable partner in its alliances. Some accounts alleged that the U.S. sought to fan the flames of the conflict as it stood to benefit the most, citing its arms sales to Ukraine, while others cast doubt on the U.S. and Europe’s seeming policy alignment on sanction measures against Russia, suggesting that the U.S. had bullied Europe into enacting those sanctions, despite deepening energy woes on the continent.\nPro-Iran Information Operations Denigrate Western Response to Conflict, Take Aim at Russia-Israel Relationship\nSimilarly, Mandiant has observed Iranian and pro-Iran information operations leveraging narratives pertaining to the invasion to take aim at the West, Saudi Arabia, and Israel. Involved campaigns have included the\nLiberty Front Press (LFP) campaign\n, as well as activity from a pro-Iran campaign we have not previously named that we are dubbing “Roaming Mayfly”, due to its potential links to the Iran-aligned Endless Mayfly influence campaign that\nCitizen Lab reported on\nin 2019.\nMessaging directed at Arabic-language audiences asserted that the U.S. fled from Afghanistan in 2021, and had now abandoned Ukraine, which deserved its fate due to its alliance with the “American axis of evil.” Similarly, English-language content averred that NATO had sacrificed Ukraine to avoid engaging in a war with Russia.\nPro-Iran information operations assets also declared that Ukraine should not have surrendered its nuclear weapons, implying that such a concession had left it vulnerable to the subsequent invasion.\nPro-Iran information operations have also leveraged the conflict to accuse the West of hypocrisy in its dealings with Saudi Arabia compared to Russia, by juxtaposing the war in Ukraine against the war in Yemen. Tangentially, assets leveled accusations of racism on the part of the West against Arabs and Muslims, noting alleged differences in its response to the conflict in Ukraine in comparison to conflicts in the Middle East.\nWe also observed Roaming Mayfly target Russian audiences on the eve of the war in what appeared to be an attempt to use the crisis in order to drive tensions between Russia and Israel. Namely, the campaign leveraged a (now-suspended) impersonator of the Russian journalist and foreign policy thinker, Fyodor Lukyanov, to publish tweets suggesting that Israeli intelligence was supporting Ukraine against Russia in the current crisis, and that Israel had supported the “Ukrainian color [revolutions]” of 2000, 2004, and 2014 (Figure 7).\nFigure 7: Tweets by suspected Fyodor Lukyanov impersonator suggesting that Israeli intelligence was supporting Ukraine against Russia in the current crisis and that Israel had supported the “Ukrainian color [revolutions]” of 2000, 2004, and 2014\nOutlook\nInformation operations observed in the context of Russia’s invasion of Ukraine have exhibited both tactical aims responding to, or seeking to shape, events on the ground and strategic objectives attempting to influence the shifting geopolitical landscape. While these operations have presented an outsized threat to Ukraine, they have also threatened the U.S. and other Western countries. As a result, we anticipate that such operations, including those involving cyber threat activity and potentially other disruptive and destructive attacks, will continue as the conflict progresses.\nOne notable feature of operations attributed to known actors thus far is their apparent consistency with the respective campaign’s established motives. Russia-aligned operations, including those attributed to Russian, Belarusian, and pro-Russia actors, have thus far employed the widest array of tactics, techniques, and procedures (TTPs) to support tactical and strategic objectives, directly linked to the conflict itself. This is especially beneficial when the facts on the ground shape Russia’s need to influence events in Ukraine, marshal domestic Russian support, and manage global perceptions of Russia’s actions. Meanwhile, pro-PRC and pro-Iran campaigns have leveraged the Russian invasion opportunistically to further progress long-held strategic objectives. We likewise expect this dynamic to continue, and are actively monitoring for expansions in their scope of information operations activity surrounding the conflict.\nPosted in\nThreat Intelligence\nSecurity & Identity\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                  "recursive_crawls": [
                    {
                      "url": "https://cloud.google.com/blog/topics/threat-intelligence/unc1151-linked-to-belarus-government",
                      "text": "UNC1151 Assessed with High Confidence to have Links to Belarus, Ghostwriter Campaign Aligned with Belarusian Government Interests | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nUNC1151 Assessed with High Confidence to have Links to Belarus, Ghostwriter Campaign Aligned with Belarusian Government Interests\nNovember 15, 2021\nMandiant\nWritten by: Gabriella Roncone, Alden Wahlstrom, Alice Revelli, David Mainor, Sam Riddell, Ben Read, Mandiant Research Team\nMandiant Threat Intelligence assesses with high confidence that UNC1151 is linked to the Belarusian government. This assessment is based on technical and geopolitical indicators. In April 2021, we released\na public report\ndetailing our high-confidence assessment that UNC1151 provides technical support to the Ghostwriter information operations campaign; this assessment, along with observed Ghostwriter narratives consistent with Belarusian government interests, causes us to assess with moderate confidence that Belarus is also likely at least partially responsible for the Ghostwriter campaign. We cannot rule out Russian contributions to either UNC1151 or Ghostwriter. However, at this time, we have not uncovered direct evidence of such contributions.\nCyber Espionage Targeting Most Closely Aligns with Belarusian Government Interests\nUNC1151 has targeted a wide variety of governmental and private sector entities, with a focus in Ukraine, Lithuania, Latvia, Poland, and Germany. The targeting also includes Belarusian dissidents, media entities, and journalists. While there are multiple intelligence services that are interested in these countries, the specific targeting scope is most consistent with Belarusian interests. In addition to the targeting scope, UNC1151 operations have focused on obtaining confidential information and no monetization efforts have been uncovered.\nSince at least 2016, UNC1151 has registered credential theft domains that spoof legitimate websites to steal victim credentials. Outside of the major American companies that are used worldwide (Facebook, Google, Twitter), most spoofed organizations have been in the five countries listed above. This has included regional webmail providers, national and local governments, and private businesses.\nMalware based intrusions have also focused on Eastern Europe. Multiple significant intrusions into Ukrainian government entities have been conducted by UNC1151. Though most of the activity was targeting Ukraine, some targeted Lithuania and Poland.\nUNC1151 targeted multiple Belarusian media entities and several members of the political opposition in Belarus in the year before the 2020 Belarusian election. UNC1151 has targeted media entities in Lithuania, Poland, Ukraine, and Latvia, but we have not seen similar targeting of opposition leaders or domestic political activists in these countries. Additionally, in several cases, individuals targeted by UNC1151 before the 2020 Belarusian election were later arrested by the Belarusian government.\nThe group has not targeted Russian or Belarusian state entities. It has spear phished intergovernmental organizations dealing with former-Soviet states, but not their governments.\nWhile the majority of UNC1151 operations have targeted countries neighboring Belarus, a small minority have been conducted against governments with no obvious connection to Belarus. There are multiple possible explanations for this targeting, including incidental inclusion on diplomatic mailing lists, or non-public bilateral issues. However, the targeting that does not align directly to Belarusian interests could indicate that UNC1151 also supports additional priorities. These out-of-scope operations mainly took place between 2016 and 2019.\nFigure 1: Map of UNC1151 Targeting from 2017 to 2020\nHistorical UNC1151 domains have spoofed the websites of entities such as Malta’s Government, Kuwaiti Army (mail.kuwaitarmy.gov-kw.ml), France’s military, and other targets that are beyond Belarus’ immediate geographic neighborhood. More recent UNC1151 domains have spoofed entities related to high priority targets such as Poland, Lithuania, and Ukraine.\nIn June 2019, UNC1151 sent a phish with a malicious attachment to 33 recipients. While the majority were in located in Poland, Lithuania, Latvia, and Ukraine, it was also sent to the Colombian, Irish and Swiss governments. In addition, multiple credential theft emails have been sent to the Colombian Ministry of Foreign Affairs.\nTechnical Evidence Indicates Operators Located in Minsk, Possible Connection to the Belarusian Government.\nSensitively sourced technical evidence indicates that the operators behind UNC1151 are likely located in Minsk, Belarus. This assessment is based on multiple sources that have linked this activity to individuals located in Belarus. In addition, separate technical evidence supports a link between the operators behind UNC1151 and the Belarusian military.\nEvidence for the location in Belarus and connection to the Belarusian Military has been directly observed by Mandiant.\nThese connections have been confirmed with separate sources.\nOperational Continuity and No Links to Previously Tracked Groups\nMandiant has tracked UNC1151 since 2017, and during this time there have been no overlaps with other tracked Russian groups, including APT28, APT29, Turla, Sandworm, and TEMP.Armageddon. While we cannot rule out Russian support for or involvement in UNC1151 or Ghostwriter operations, the TTPs used by UNC1151 are unique to this group.\nSandworm Team has conducted significant credential theft operations during the time UNC1151 has been active, but the techniques used have been distinct. While UNC1151 primarily sent phishes impersonating security notices, Sandworm team has leveraged watering holes designed to redirect users to spoofed login websites.\nTEMP.Armageddon has conducted extensive targeting of multiple Ukrainian entities during the time UNC1151 has been actively targeting Ukraine. The two groups appear to act without knowledge of the other and do not share any malware, infrastructure, or other resources.\nWe continue to assess that Ghostwriter activity is distinct from other information operations campaigns such as Secondary Infektion.\nSince 2017, UNC1151 operations have leveraged evolving but contiguous TTPs. This evolution is consistent with the maturation of a single organization, and we have not uncovered any evidence of a discontinuity in operators.\nGhostwriter Operations Aligned with Narrower Belarusian Interests Since Mid-2020\nPre-2020 Ghostwriter information operations were primarily anti-NATO, but since mid-2020 they have focused on Belarus’ neighbors.\nFigure 2: Ghostwriter Operations 2016-2021\nFrom the earliest observed Ghostwriter operation until mid-2020, the Ghostwriter campaign primarily promoted anti-NATO narratives that appeared intended to undercut regional security cooperation in operations targeting Lithuania, Latvia, and Poland. To this end, observed operations have disseminated disinformation portraying the foreign troop presence in the region as a threat to residents and alleging that the costs of NATO membership are a detriment to local populations. The seeming intended effect of these narratives—to erode regional support for NATO—can serve both Russian and Belarusian interests. We note, however, that the campaign has specifically targeted audiences in countries bordering Belarus, whereas Russia has long promoted anti-NATO narratives both in the region and further afield. Specifically, observed Ghostwriter operations, in this time period and through the present, have almost completely excluded Estonia, which notably does not border Belarus but is a Baltic State, NATO member, and a relevant component of any concerns about NATO’s security posture on its eastern flank.\nTwenty-two out of 24 observed Ghostwriter operations conducted prior to mid-2020 promoted narratives that were either directly critical of NATO—including allegations of the deployment of nuclear weapons, NATO troops spreading COVID-19, and crimes committed by NATO troops—or otherwise critical of the presence of foreign troops from allied member states.\nTwo additional operations conducted during this period promoted narratives that appeared intended to create controversy in Lithuanian domestic political affairs.\nSince the disputed August 2020 elections in Belarus, Ghostwriter operations have been more distinctly aligned with Minsk’s interests. Promoted narratives have focused on alleging corruption or scandal within the ruling parties in Lithuania and Poland, attempting to create tensions in Polish-Lithuanian relations, and discrediting the Belarusian opposition. Both governments have strongly condemned the Lukashenka regime’s crackdown on demonstrations and extraordinary efforts to stay in power. In addition, several Ghostwriter operations have promoted narratives specific to Belarus, including narratives critical of alleged Polish government support for Belarusian dissidents. It is possible that operations seemingly intended to undermine local confidence in the Lithuanian and Polish governments are a response to what Belarus has claimed to be their intervention in Belarusian domestic affairs. Likewise, operations seemingly intended to create tensions between the two nations may be an attempt to undercut their cooperation, which has in part characterized their responses to Belarus-related issues.\nIn August 2020, Ghostwriter personas published articles that portrayed the protests in Belarus as orchestrated by the U.S. and NATO, claiming that NATO is willing to intervene militarily on behalf of the protestors and arguing that the West should refrain from interfering in the \"internal affairs\" of Belarus.\nAdditionally, Ghostwriter operations have promoted narratives that seem designed in part to suggest foreign interference in Belarus, primarily from Poland and Lithuania.\nSince the August 2020 elections, 16 out of 19 Ghostwriter operations promoted narratives defaming the Polish and Lithuanian governments. Of the remaining three narratives, two criticized NATO and one the EU.\nSome operations targeting Poland and Lithuania have promoted narratives with connections to regional disputes involving Belarus. For example, multiple operations have alleged that accidents had occurred at Lithuanian nuclear power facilities. Lithuania has actively opposed the construction and operation of Belarus’s Astravyets nuclear power plant, which is located near the Lithuanian border. Likewise, an August 2021 Ghostwriter operation targeting Poland and Lithuania promoted a narrative about a fabricated crime committed by migrants, while Poland and Lithuania were accusing Belarus of orchestrating an outflow of migrants from its borders.\nWe have observed some dissemination of these narratives in Russian by what we assess to be campaign assets. The promotion of Ghostwriter narratives in Russian suggests that they are in some way also intended to influence Russian-speaking audiences.\nGhostwriter narratives, particularly those critical of neighboring governments, have been featured on Belarusian state television as fact. We are unable to ascertain whether this is part of a coordinated strategy or if it is simply Belarusian state TV promoting narratives that are consistent with regime interest and being unconcerned with accuracy. Such television programs suggest that some Ghostwriter operations’ promoted narratives are particularly relevant to the ongoing internal political conversation in Belarus, and it raises the possibility that discrediting rival governments and Belarusian opposition figures in the eyes of the Belarusian public may be an additional goal of the Ghostwriter campaign.\nWe have observed multiple instances of Ghostwriter narratives discrediting the Polish government promoted on Belarusian state-owned TV news. The TV reports have featured allegedly leaked Polish government communications and documents that were promoted in a hack-and-leak style Ghostwriter operation that began in June 2021. They also specifically highlighted narratives that news programs framed as documenting Polish support for the Belarusian opposition. In one instance, a Belarusian TV news report even cited by name a Russian-language Telegram channel that we believe to be a Ghostwriter asset as its source.\nWe have additionally observed pro-Belarusian government Telegram channels regularly repost or cite a Russian-language Telegram channel that we have attributed to Ghostwriter.\nUncertainty around Malware Development and Information Operations Content\nThe sources of written content for Ghostwriter operations and of the malware used by UNC1151 remain uncertain. The creation of content for information operations, especially in multiple languages, requires a distinct skillset from conducting computer intrusions. Likewise, the development of custom malware requires software engineering skills that are distinct from those required to set up a credential theft operation. It is possible that the individuals supporting these functions are part of the same organization assessed to have a nexus to Belarus; however, the uncertainty and distinct skillsets required for different aspects of this activity creates a possibility for the involvement of additional organizations or countries.\nGhostwriter information operations have published content in English, Lithuanian, Polish, Latvian, Ukrainian, Russian, and German.\nWe have determined that UNC1151 uses GoPhish primarily for their email sending operations – including both cyber espionage and Ghostwriter content dissemination. They often spoof the from envelope of the emails and previously leveraged email delivery services such as SMTP2GO to legitimize themselves. Technical details from early UNC1151 campaigns suggest that the group was unfamiliar with these technologies and may have learned on the job how to use them properly.\nUNC1151 uses credential harvesting domains attempting to spoof legitimate webmail providers, generic login pages, and the legitimate websites of their targets. These credential harvesting domains are sent to victims via phishing email. Over time, UNC1151 domain registration TTPs have shifted. Early domain registration TTPs looked similar to, but did not technically overlap with, clusters of credential harvesting domains we attributed to Russian threat groups. Notably the group has shifted away from using Freenom and towards using Cloudflare services, which may be reflective of increased resources being available to the group.\nUNC1151 has used a proprietary suite of malware, including HIDDENVALUE, and HALFSHELL, and has infrequently been observed using open source or publicly available tools. Though we have observed the use of these early-stage foothold malware families, we have yet to see post-compromise activity.\nUNC1151 has improved in its technical skill since we began tracking the group. UNC1151 malware families are commonly .NET applications with basic command functionality. We have not seen any code overlap between these malware families, though supported commands appear to be similar at a high level. We have observed variants of HIDDENVALUE which support slightly different sets of commands. Prior to HIDDENVALUE, which has been used in several different operations targeting Ukraine and Poland, malware families used by UNC1151 may have been used for limited sets of operations.\nAttribution Summary\nMandiant assesses with high confidence that UNC1151 is linked to the Belarusian government and with moderate confidence is linked to the Belarusian military. This is based on the below factors:\nThe countries targeted by the majority of UNC1151 operations have strained bilateral relationships with Belarus. While some of these countries are consistent targets of Russian cyber espionage, the specific mix supports a Belarusian nexus.\nMinistries of Defense are the most common government entities targeted by UNC1151, suggesting a military intelligence focus for the group.\nIndividual targets, including individuals who are part of the Belarusian opposition and media are of most interest to Belarus.\nSensitive technical information locates the operation in Minsk, Belarus and links it to the Belarusian Military.\nUNC1151 has conducted operations without a clear, direct link to Belarusian priorities. However, these are a minority of operations and are plausibly explained by multiple factors.\nMandiant assesses with high confidence that Ghostwriter information operations are conducted in support of the Belarusian government and with moderate confidence that they are conducted with Belarusian sponsorship.\nThe operations conducted since the disputed Belarusian elections in 2020 have conformed to specific parochial Belarusian government goals and align with the overt actions taken by Belarus against Lithuania and Poland.\nThe close technical links between UNC1151 and the Ghostwriter campaign suggest a high likelihood of a shared sponsor.\nHowever, we lack insight into the generation of the information operations’ content.\nMandiant has examined the possibility of Russian participation in UNC1151 and Ghostwriter operations, but we do not have sufficient evidence to confirm or refute a role in these activities. Mandiant has seen high level TTP overlaps with Russian operations and much of the targeting and information operations are consistent with Russian goals. Given the close ties between the governments, collaboration is plausible; however, we have not uncovered direct evidence of Russian government involvement.\nUNC1151’s initial focus on NATO’s reputation in the Baltics is also a goal of Russia. However, the operations focuses in Lithuania and Latvia, which border Belarus, and were not uncovered in Estonia, which does not.\nRussia has significant offensive cyber and information operations expertise that could have supported the operation.\nOutlook and Implications\nBelarusian sponsorship of UNC1151 and the links to the Ghostwriter operations showcases the accessibility and deniability of provocative information operations. While the cyber espionage operation was regionally focused and primarily leveraged an open source platform to steal credentials, it was able to support impactful information operations. These types of cyber operations are a one of many tools that governments use to accomplish their goals, and do not exist in a vacuum, but are leveraged alongside other types of operations.\nPosted in\nThreat Intelligence\nSecurity & Identity\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                      "recursive_crawls": [
                        {
                          "url": "https://cloud.google.com/blog/topics/threat-intelligence/gemini-malware-analysis-code-interpreter-threat-intelligence",
                          "text": "Empowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nNovember 19, 2024\nBernardo Quintero\nAndrés Ramírez\nTry Gemini 1.5 models\nGoogle's most advanced multimodal models in Vertex AI\nTry it\nOne of Google Cloud's major missions is to arm security professionals with modern tools to help them defend against the latest threats. Part of that mission involves moving closer to a more autonomous, adaptive approach in threat intelligence automation.\nIn our latest advancements in malware analysis, we’re equipping Gemini with new capabilities to address obfuscation techniques and obtain real-time insights on indicators of compromise (IOCs). By integrating the\nCode Interpreter extension\n, Gemini can now dynamically create and execute code to help deobfuscate specific strings or code sections, while\nGoogle Threat Intelligence\n(GTI)\nfunction calling\nenables it to query GTI for additional context on URLs, IPs, and domains found within malware samples. These tools are a step toward transforming Gemini into a more adaptive agent for malware analysis, enhancing its ability to interpret obfuscated elements and gather contextual information based on the unique characteristics of each sample.\nBuilding on this foundation, we previously explored critical preparatory steps with Gemini 1.5 Pro, leveraging its expansive 2-million-token input window to process substantial sections of\ndecompiled code in a single pass\n. To further enhance scalability, we introduced Gemini 1.5 Flash, incorporating\nautomated binary unpacking\nthrough Mandiant Backscatter before the decompilation phase to tackle certain obfuscation techniques. Yet, as any seasoned malware analyst knows, the true challenge often begins once the code is exposed. Malware developers frequently employ obfuscation tactics to conceal critical IOCs and underlying logic. Malware may also download additional malicious code, making it challenging to fully understand the behavior of a given sample.\nFor large language models (LLMs), obfuscation techniques and additional payloads create unique challenges. When dealing with obfuscated strings such as URLs, IPs, domains, or file names, LLMs often “hallucinate” without explicit decoding methods. Additionally, LLMs cannot access, for example, URLs that host additional payloads, often resulting in speculative interpretations about the sample’s behavior.\nTo help with these challenges, Code Interpreter and GTI function calling tools provide targeted solutions. Code Interpreter enables Gemini to autonomously create and execute custom scripts, as needed, using its own judgment to decode obfuscated elements within a sample, such as strings encoded with XOR-based algorithms. This capability minimizes interpretation errors and enhances Gemini's ability to reveal hidden logic without requiring manual intervention.\nMeanwhile, GTI function calling expands Gemini’s reach by retrieving contextualized information from Google Threat Intelligence on suspicious external resources such as URLs, IPs, or domains, providing verified insights without speculative guesses. Together, these tools equip Gemini to better handle obfuscated or externally hosted data, bringing it closer to the goal of functioning as an autonomous agent for malware analysis.\nTo illustrate how these enhancements boost Gemini's capabilities, let's look at a practical example. In this case, we’re analyzing a PowerShell script that contains an obfuscated URL that hosts a second-stage payload. This particular sample was previously analyzed with some of the most advanced publicly available LLM models, which incorporate code generation and execution as part of their reasoning process. Despite these capabilities, each model “hallucinated,” generating completely fabricated URLs instead of accurately revealing the correct one.\nObfuscated PowerShell code sample to be analyzed by Gemini\nUtilizing Code Interpreter and GTI function calling as part of its reasoning process, Gemini autonomously generated the following report without any human intervention. When deemed necessary, it applies these tools to process and extract additional information from the sample.\nFinal Report: PowerShell Malware with URL Deobfuscation\nThis report analyzes a PowerShell script designed to download and execute a file from an obfuscated URL. The script employs a custom obfuscation routine resembling the RC4 stream cipher to conceal the malicious URL.\nFunctionality:\nObfuscation Routine:\nThe script defines a function\nF\nthat performs byte-level XOR encryption using a key derived from the string \"tox2\". This function is used to deobfuscate the malicious URL.\nURL Decryption:\nThe obfuscated URL, stored as a byte array, is decrypted using the\nF\nfunction with \"tox2\" as the key.\nFile Download:\nThe script downloads a file from the decrypted URL (\nhxxps://filedn[.]eu/lODWTgN8sswHA6Pn8HXWe1J/tox2/Scan_docs%2398097960[.]msi\n) and saves it to the system's temporary directory under a randomly generated filename.\nExecution:\nFinally, the script executes the downloaded file.\nIndicators of Compromise (IOCs):\nURL:\nhxxps://filedn[.]eu/lODWTgN8sswHA6Pn8HXWe1J/tox2/Scan_docs%2398097960[.]msi\nDeobfuscation Code:\ndef deobfuscate(x, y):\r\n    s = list(range(256))\r\n    j = 0\r\n    k = [ord(c) for c in y]\r\n    for i in range(256):\r\n        j = (j + s[i] + k[i % len(k)]) % 256\r\n        s[i], s[j] = s[j], s[i]\r\n    i = 0\r\n    j = 0\r\n    output = []\r\n    for m in range(len(x)):\r\n        i = (i + 1) % 256\r\n        j = (j + s[i]) % 256\r\n        s[i], s[j] = s[j], s[i]\r\n        output.append(x[m] ^ s[(s[i] + s[j]) % 256])\r\n    return output\r\n\r\na = [0x25, 0x7B, 0x5A, 0xD8, 0x9C, 0xFF, 0xC3, 0xA4, 0x95, 0xB7, \r\n0x9D, 0x6E, 0x5F, 0x4D, 0x49, 0xFB, 0x78, 0x32, 0xB8, 0x17, 0x72, \r\n0x01, 0x31, 0xFB, 0xC0, 0x58, 0x45, 0xCB, 0x5C, 0x3C, 0xDD, 0x00, \r\n0x60, 0x87, 0x25, 0xB2, 0x44, 0xA6, 0xC5, 0xEA, 0x71, 0xAA, 0x9D, \r\n0xA1, 0x05, 0x5F, 0xBD, 0x41, 0x28, 0x70, 0x30, 0x6B, 0x96, 0x24, \r\n0x92, 0xA0, 0x9D, 0x92, 0x23, 0x79, 0x69, 0x2C, 0x1B, 0x1E, 0xEB, \r\n0x69, 0x8F, 0x04, 0x10, 0x74, 0xBC]\r\nb = \"tox2\"\r\nc = deobfuscate(a, b)\r\ndecoded_url = \"\".join(chr(i) for i in c)\r\nprint(decoded_url)\nGoogle Threat Intelligence (GTI) Lookup:\nThe GTI lookup provides valuable context regarding the identified IOC:\nThreat Actor:\nUNC5687, known for using MESHAGENT in phishing campaigns impersonating the Security Service of Ukraine.\nCampaign:\nThis specific URL is linked to a campaign spreading MESHAGENT via phishing emails with malicious links. The campaign involved a captcha page leading to the download of either a malicious MSI or EXE file.\nMalware:\nThe campaign delivers MESHAGENT, an open-source remote access framework, configured to communicate with C2 domains linked to a service called \"AnonVNC.\"\nConclusion:\nThe analyzed PowerShell script is confirmed to be malicious, associated with a phishing campaign by UNC5687 distributing the MESHAGENT remote access tool.\nGemini identified that the script employs an XOR-based obfuscation algorithm that resembles  RC4 to conceal the download URL. Recognizing this pattern, Gemini autonomously generates and executes a Python deobfuscation script within the Code Interpreter sandbox, successfully revealing the external resource.\nWith the URL in hand, Gemini then utilizes GTI function calling to query Google Threat Intelligence for further context. This analysis links the URL to UNC5687, a threat cluster known for using a remote access tool in phishing campaigns impersonating the Security Service of Ukraine.\nAs we’ve seen, the integration of these tools has strengthened Gemini’s ability to function as a malware analyst capable of adapting its approach to address obfuscation and gathering vital context on IOCs. By incorporating the Code Interpreter and GTI function calling, Gemini is better equipped to navigate complex samples by autonomously interpreting hidden elements and contextualizing external references.\nWhile these are significant advancements, many challenges remain, especially given the vast diversity of malware and scenarios that exist in the threat landscape. We’re committed to making steady progress, and future updates will continue to enhance Gemini's capabilities, moving us closer to a more autonomous, adaptive approach in threat intelligence automation.\nPosted in\nThreat Intelligence\nRelated articles\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nThreat Intelligence\n(In)tuned to Takeovers: Abusing Intune Permissions for Lateral Movement and Privilege Escalation in Entra ID Native Environments\nBy Mandiant  • 7-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                          "recursive_crawls": [
                            {
                              "url": "https://cloud.google.com/blog/topics/threat-intelligence/gemini-for-malware-analysis",
                              "text": "From Assistant to Analyst: The Power of Gemini 1.5 Pro for Malware Analysis | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nFrom Assistant to Analyst: The Power of Gemini 1.5 Pro for Malware Analysis\nApril 29, 2024\nBernardo Quintero\nTry Gemini 1.5 models\nGoogle's most advanced multimodal models in Vertex AI\nTry it\nExecutive Summary\nA growing amount of malware has naturally increased workloads for defenders and particularly malware analysts, creating a need for improved automation and approaches to dealing with this classic threat.\nWith the recent rise in generative AI tools, we decided to put our own\nGemini 1.5 Pro\nto the test to see how it performed at analyzing malware. By providing code and using a simple prompt, we asked Gemini 1.5 Pro to determine if the file was malicious, and also to provide a list of activities and indicators of compromise.\nWe did this for multiple malware files, testing with both decompiled and disassembled code, and Gemini 1.5 Pro was notably accurate each time, generating summary reports in human-readable language. Gemini 1.5 Pro was even able to make an accurate determination of code that — at the time — was receiving zero detections on VirusTotal.\nIn our testing with other similar gen AI tools, we were required to divide the code into chunks, which led to vague and non-specific outcomes, and affected the overall analysis. Gemini 1.5 Pro, however, processed the entire code in a single pass, and often in about 30 to 40 seconds.\nIntroduction\nThe explosive growth of malware continues to challenge traditional, manual analysis methods, underscoring the urgent need for improved automation and innovative approaches. Generative AI models have become invaluable in some aspects of malware analysis, yet their effectiveness in handling large and complex malware samples has been limited. The\nintroduction of Gemini 1.5 Pro\n, capable of processing up to 1 million tokens, marks a significant breakthrough. This advancement not only empowers AI to function as a powerful assistant in automating the malware analysis workflow but also significantly scales up the automation of code analysis. By substantially increasing the processing capacity, Gemini 1.5 Pro paves the way for a more adaptive and robust approach to cybersecurity, helping analysts manage the asymmetric volume of threats more effectively and efficiently.\nTraditional Techniques for Automated Malware Analysis\nThe foundation of automated malware analysis is built on a combination of static and dynamic analysis techniques, both of which play crucial roles in dissecting and understanding malware behavior. Static analysis involves examining the malware without executing it, providing insights into its code structure and unobfuscated logic. Dynamic analysis, on the other hand, involves observing the execution of the malware in a controlled environment to monitor its behavior, regardless of obfuscation. Together, these techniques are leveraged to gain a comprehensive understanding of malware.\nParallel to these techniques, AI and machine learning (ML) have increasingly been employed to classify and cluster malware based on behavioral patterns, signatures, and anomalies. These methodologies have ranged from supervised learning, where models are trained on labeled datasets, to unsupervised learning for clustering, which identifies patterns without predefined labels to group similar malware.\nDespite technological advancements, the increasing complexity and volume of malware present substantial challenges. While ML enhances the detection of malware variants, it remains inadequate against completely new threats. This detection gap allows advanced attacks to slip through cybersecurity defenses, compromising system protection.\nGenerative AI as Malware Analysis Assistant\nCode Insight\n, unveiled at the RSA Conference 2023, marked a significant step forward in leveraging generative AI (gen AI) for malware analysis. This novel feature of Google's VirusTotal platform specializes in analyzing code snippets and generating reports in natural language, effectively emulating the approach of a malware analyst. Initially supporting PowerShell scripts, Code Insight later expanded to other scripting languages and file formats, including Batch, Shell, VBScript, and Office documents.\nBy processing the code and generating summary reports, Code Insight assists analysts in understanding the behavior of the code and identifying attack techniques. This includes uncovering hidden functionalities, malicious intent, and potential attack vectors that might be\nmissed by traditional detection methods\n.\nHowever, due to the inherent constraints of large language models (LLMs) and their limited token input capacity, the size of files that Code Insight could handle was restricted. Although there have been continuous improvements to increase the maximum file size limit and support more formats, analyzing binaries and executables still poses a significant challenge. When these files are disassembled or decompiled, their code size typically surpasses the processing capabilities of the LLMs available at the time. Consequently, gen AI models have functioned primarily as assistants to human analysts, enabling the analysis of specific code fragments from binaries rather than processing the entire code, which is often too voluminous for these models.\nReverse Engineering: The Human Face of Malware Analysis\nReverse engineering is arguably the most advanced malware analysis technique available to cybersecurity professionals. This process involves disassembling the binaries of malicious software and carrying out a meticulous examination of the code. Through reverse engineering, analysts can uncover the exact functionality of malware and understand its execution flow. However, this method is not without its challenges. It requires an immense amount of time, a deep level of expertise, and an analytical mindset to interpret each instruction, data structure, and function call to reconstruct the malware's logic and uncover its secrets.\nFurthermore, scaling reverse engineering efforts poses a significant challenge. The scarcity of specialized talent in this field exacerbates the difficulty of conducting these analyses at scale. Given the intricate and time-consuming nature of reverse engineering, the cybersecurity community has long sought ways to augment this process, making it more efficient and accessible.\nGemini 1.5 Pro: Scalable Reverse Engineering for Malware Analysis\nThe ability to process prompts of up to 1 million tokens enables a qualitative leap in malware analysis, particularly in the realm of reverse engineering. This advancement finally brings the power of gen AI to the analysis of binaries and executables, a task previously reserved for highly skilled human analysts due to its complexity.\nHow does Gemini 1.5 Pro achieve this?\nIncreased capacity\n: With its expanded token limit, Gemini 1.5 Pro can entirely analyze some disassembled or decompiled executables in a single pass, eliminating the need to break down code into smaller fragments. This is crucial because fragmenting code can lead to a loss of context and important correlations between different parts of the program. When analyzing only small snippets, it is difficult to understand the overall functionality and behavior of the malware, potentially missing key insights into its purpose and operation. By analyzing the entire code at once, Gemini 1.5 Pro gains a holistic understanding of the malware, allowing for more accurate and comprehensive analysis.\nCode interpretation\n: Gemini 1.5 Pro can interpret the intent and purpose of the code, not just identify patterns or similarities. This is possible due to its training on a massive dataset of code, encompassing assembly language from various architectures, high-level languages like C, and pseudo-code produced by decompilers. This extensive knowledge base, combined with its understanding of operating systems, networking, and cybersecurity principles, allows Gemini 1.5 Pro to effectively emulate the reasoning and judgment of a malware analyst. As a result, it can predict the malware's actions and provide valuable insights even for never-seen-before threats. For more information on this, see the zero day case study section later in this post.\nDetailed analysis\n: Gemini 1.5 Pro can generate summary reports in human-readable language, making the analysis process more accessible and efficient. This goes far beyond the simple verdicts typically provided by traditional machine learning algorithms for classification and clustering. Gemini 1.5 Pro's reports can include detailed information about the malware's functionality, behavior, and potential attack vectors, as well as indicators of compromise (IOCs) that can be used to feed other security systems and improve threat detection and prevention capabilities.\nLet's explore a practical case study to examine how Gemini 1.5 Pro performs in analyzing decompiled code with a representative malware sample. We processed two WannaCry binaries automatically using the Hex-Rays decompiler, without adding any annotations or additional context. This approach resulted in two C code files, one 268 KB and the other 231 KB in size, which together amount to more than 280,000 tokens for processing by the LLM.\nIn our testing with other similar gen AI tools, we faced the necessity of dividing the code into chunks. This fragmentation often compromised the comprehensiveness of the analysis, resulting in vague and non-specific outcomes. These limitations highlight the challenges of using such tools with complex code bases.\nGemini 1.5 Pro, however, marks a significant departure from these constraints. It processes the entire decompiled code in a single pass, taking just 34 seconds to deliver its analysis. The initial summary provided by Gemini 1.5 Pro is notably accurate, showcasing its ability to handle large and complex datasets seamlessly and effectively:\nIssues a malicious verdict associated with ransomware\nIdentifies some files as IOCs (c.wnry and tasksche.exe)\nAcknowledges the use of an algorithm to generate IP addresses and perform network scans to find targets on port 445/SMB to spread to other computers\nIdentifies URL/domain (WannaCry's \"killswitch\") and relevant registry key and mutex\nWhile it might seem that Gemini 1.5 Pro's report of WannaCry is based on pre-trained knowledge of this specific malware, this isn't the case. The analysis comes from the model's ability to independently interpret the code. This will become even clearer as we look at the upcoming examples where Gemini 1.5 Pro analyzes unfamiliar malware samples, demonstrating its wide-ranging capabilities.\nLLM on Code: Disassembled vs. Decompiled\nIn the previous example showcasing WannaCry analysis, there was a crucial step before feeding the code to the LLM: decompilation. This process, which transforms binary code into a higher-level representation like C, is fully automated and mirrors the initial steps taken by malware analysts when manually dissecting malicious software. But what is the difference between disassembled and decompiled code, and how does it impact LLM analysis?\nDisassembly: This process converts binary code into assembly language, a low-level representation specific to the processor architecture. While human-readable, assembly code is still quite complex and requires significant expertise to understand. It is also much longer and more repetitive than the original source code.\nDecompilation: This process attempts to reconstruct the original source code from the binary. While not always perfect, decompilation can significantly improve readability and conciseness compared to disassembled code. It achieves this by identifying high-level constructs like functions, loops, and variables, making the code easier to understand for analysts.\nGiven these factors, when using LLMs for binary analysis, decompilation offers several advantages on efficiency and scalability. The shorter and more structured output from decompilation fits more readily within the processing constraints of LLMs, allowing for a more efficient analysis of large or complex binaries. In fact, the output from a decompiler is five to 10 times more concise than that produced by a disassembler.\nDisassembly is necessary to perform accurate decompilation and remains an invaluable tool in certain scenarios where detailed, low-level analysis is crucial. Given the structured and higher-level nature of decompiled output, there are specific circumstances where disassembly provides insights that decompilation cannot match.\nFortunately, Gemini 1.5 Pro demonstrates equal capability in processing both high-level languages and assembly across various architectures. Thus, our implementation for automating binary analysis can utilize both strategies or adopt a hybrid approach, as suited to the specific circumstances of each case. This flexibility allows us to tailor our analysis method to the nature of the binary in question, optimizing for efficiency, depth of insight, and the specific objectives of the analysis, whether that means dissecting the logic and flow of the program or diving into the intricate details of its low-level operations.\nNext, we'll examine a case where we directly employ disassembly for analysis. This time, we're working with a more recent and unknown binary; in fact, the executable submitted to VirusTotal is flagged as malicious by only four out of the 70 VirusTotal anti-malware engines, and only in a generic sense, without providing any details about the malware family that could offer further clues about its behavior.\nAfter automatic preprocessing with HexRays/IDA Pro, the 306.50 KB executable binary produces a 1.5 MB assembly file that Gemini 1.5 Pro can process in a single pass within 46 seconds , thanks to its large token window in the prompt. This capability allows for an analysis of the entire assembly output, offering detailed insights into the binary's operations.\nThis case of the unknown binary showcases the remarkable capabilities of Gemini 1.5 Pro. Despite only four out of 70 anti-malware engines on VirusTotal flagging the file as malicious—using only generic signatures—Gemini 1.5 Pro identified the file as malicious, providing a detailed explanation for its verdict. The file is likely a game cheat designed to inject a game hack dynamic-link library (DLL) into the Grand Theft Auto video game process. The designation of \"malicious\" may depend on perspective: deemed malicious by the game's developers or their security team focused on anti-cheating measures, yet potentially desirable for some players. Nevertheless, this automated first-pass analysis is not only impressive but also illuminating regarding the nature and intent of the binary.\nUnveiling the Unknown: A Case Study in Zero-Day Detection\nThe true test of any malware analysis tool lies in its ability to identify never-before-seen threats undetected by traditional methods and proactively protecting systems from zero-day attacks. Here, we examine a case where an executable file is undetected by any anti-virus or sandbox on VirusTotal.\nThe 833 KB file, medui.exe, was decompiled into 189,080 tokens and subsequently processed by Gemini 1.5 Pro in a mere 27 seconds to produce a complete malware analysis report in a single pass.\nThis analysis revealed suspicious functionalities, leading Gemini 1.5 Pro to issue a malicious verdict. Based on its observations, it concluded that the primary goal of this malware is to steal cryptocurrency by hijacking Bitcoin transactions and evading detection through the disabling of security software.\nThis showcases Gemini's ability to go beyond simple pattern matching or ML classification and leverage its deep understanding of code behavior to identify malicious intent, even in previously unseen threats. This is a significant advancement in the field of malware analysis, as it allows us to proactively detect and respond to new and emerging threats that traditional methods might miss.\nFrom Assistant to Analyst\nGemini 1.5 Pro unlocks impressive capabilities, enabling the analysis of large volumes of decompiled and disassembled code. It has the potential to significantly change our approach to fighting malware by enhancing efficiency, accuracy, and our ability to scale in response to a growing number of threats.\nHowever, it's important to remember that this is just the beginning. While Gemini 1.5 Pro represents a significant leap forward, the field of gen AI is still in its infancy. There are several challenges that need to be addressed to achieve truly robust and reliable automated malware analysis:\nObfuscation and packing: Malware authors are constantly developing new techniques to obfuscate their code and evade detection. In response, there's a growing need to not only continuously improve gen AI models but also to enhance the preprocessing of binaries before analysis. Adopting dynamic approaches that utilize various preprocessing tools can more effectively unpack and deobfuscate malware. This preparatory step is crucial for enabling gen AI models to accurately analyze the underlying code, ensuring they keep pace with evolving obfuscation techniques and remain effective in detecting and understanding sophisticated malware threats.\nIncreasing binary size: The complexity of modern software is mirrored in the growing size of its binaries. This trend presents a significant challenge, as the majority of gen AI models are constrained by much lower token window limits. In contrast, Gemini 1.5 Pro stands out by supporting up to 1 million tokens—currently the highest known capacity in the field. Nevertheless, even with this remarkable capability, Gemini 1.5 Pro may encounter limitations when handling exceptionally large binaries. This underscores the ongoing need for advancements in AI technology to accommodate the analysis of increasingly large files, ensuring comprehensive and effective malware analysis as software complexity continues to escalate.\nEvolving attack techniques: As attackers continuously innovate, crafting new methods to bypass security measures, the challenge for gen AI models extends beyond simple adaptability. These models must not only learn and recognize new threats but also evolve in conjunction with the efforts of researchers and developers. There's a need to devise new methods for automating the preprocessing of threat data, which would enrich the context provided to AI models. For instance, integrating additional data from static and dynamic analysis tools, such as sandbox reports, plus the decompiled and disassembled code, can significantly enhance the models' understanding and detection capabilities.\nThe journey towards scaling automated malware analysis is ongoing, but Gemini 1.5 Pro marks a significant milestone. Give\nGemini 1.5 Pro a try\n; we look forward to seeing the innovative ways the community leverages it to enhance security operations.\nAt\nGSEC Malaga\n, we continue to research and develop ways to apply these models effectively in AI, pushing the boundaries of what's possible in cybersecurity and contributing to a safer digital future.\nMalware Details\nThe following table contains details on the malware samples discussed in this post.\nFilename\nSHA-256 Hash\nSize\nFirst Seen\nFile Type\nlhdfrgui.exe (WannaCry dropper)\n24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c\n3.55 MB (3723264 bytes)\n2017-05-12\nWin32 EXE\ntasksche.exe (WannaCry cryptor)\ned01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa\n3.35 MB (3514368 bytes)\n2017-05-12\nWin32 EXE\nEXEC.exe\n1917ec456c371778a32bdd74e113b07f33208740327c3cfef268898cbe4efbfe\n306.50 KB (313856 bytes)\n2022-04-18\nWin32 EXE\nmedui.exe\n719b44d93ab39b4fe6113825349addfe5bd411b4d25081916561f9c403599e50\n833.50 KB (853504 bytes)\n2024-03-27\nWin32 EXE\nPrompt\nThe following is the exact prompt used in all the examples covered in the post. The only exception is the example where the word \"disassembled\" is used instead of \"decompiled\" because, as explained, we're working with disassembled code rather than decompiled code to show that Gemini 1.5 Pro can interpret both.\nAct as a malware analyst by thoroughly examining this decompiled executable code. Methodically break down each step, focusing keenly on understanding the underlying logic and objective. Your task is to craft a detailed summary that encapsulates the code's behavior, pinpointing any malicious functionality. Start with a verdict (Benign or Malicious), then a list of activities including a list of IOCs if any URLs, created files, registry entries, mutex, network activity, etc.\n+[attached decompiled.c.txt sample file]\nPosted in\nThreat Intelligence\nSecurity & Identity\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                              "recursive_crawls": [
                                {
                                  "url": "https://cloud.google.com/blog/topics/threat-intelligence/cybersecurity-forecast-2025",
                                  "text": "Emerging Threats: Cybersecurity Forecast 2025 | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nNovember 13, 2024\nAdam Greenberg\nContent Marketing Manager, Mandiant\nEvery November, we start sharing forward-looking insights on threats and other cybersecurity topics to help organizations and defenders prepare for the year ahead. The Cybersecurity Forecast 2025 report, available today, plays a big role in helping us accomplish this mission.\nThis year’s report draws on insights directly from Google Cloud's security leaders, as well as dozens of analysts, researchers, responders, reverse engineers, and other experts on the frontlines of the latest and largest attacks.\nCybersecurity Forecast 2025\nRead the report to learn about threat, defender, and other cybersecurity trends that we anticipate seeing in the year ahead.\nDownload now\nKey Threat Findings\nBuilt on trends we are already seeing today, the Cybersecurity Forecast 2025 report provides a realistic outlook of what organizations can expect to face in the coming year. The report covers a lot of topics across all of cybersecurity, with a focus on various threats such as:\nAttacker Use of Artificial Intelligence (AI):\nThreat actors will increasingly use AI for sophisticated phishing, vishing, and social engineering attacks. They will also leverage deepfakes for identity theft, fraud, and bypassing security measures.\nAI for Information Operations (IO):\nIO actors will use AI to scale content creation, produce more persuasive content, and enhance inauthentic personas.\nThe Big Four:\nRussia, China, Iran, and North Korea will remain active, engaging in espionage operations, cyber crime, and information operations aligned with their geopolitical interests.\nRansomware and Multifaceted Extortion:\nRansomware and multifaceted extortion will continue to be the most disruptive form of cyber crime, impacting various sectors and countries.\nInfostealer Malware:\nInfostealer malware will continue to be a major threat, enabling data breaches and account compromises.\nDemocratization of Cyber Capabilities:\nIncreased access to tools and services will lower barriers to entry for less-skilled actors.\nCompromised Identities:\nCompromised identities in hybrid environments will pose significant risks.\nWeb3 and Crypto Heists:\nWeb3 and cryptocurrency organizations will increasingly be targeted by attackers seeking to steal digital assets.\nFaster Exploitation and More Vendors Targeted:\nThe time to exploit vulnerabilities will continue to decrease, and the range of targeted vendors will expand.\nBe Prepared for 2025\nRead the\nCybersecurity Forecast 2025\nreport for a more in-depth look at these and other threats, as well as other security topics such as post-quantum cryptography, and insights unique to the JAPAC and EMEA regions.\nFor an even deeper look at the threat landscape next year, register for our\nCybersecurity Forecast 2025 webinar\n, which will be hosted once again by threat expert Andrew Kopcienski.\nFor even more insights, hear directly from our\nsecurity leaders\n: Charles Carmakal, Sandra Joyce, Sunil Potti, and Phil Venables.\nPosted in\nThreat Intelligence\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nThreat Intelligence\n(In)tuned to Takeovers: Abusing Intune Permissions for Lateral Movement and Privilege Escalation in Entra ID Native Environments\nBy Mandiant  • 7-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                                  "recursive_crawls": [
                                    {
                                      "url": "https://cloud.google.com/blog/topics/threat-intelligence/flareon-11-challenge-solutions",
                                      "text": "Flare-On 11 Challenge Solutions | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nNovember 8, 2024\nMandiant\nWritten by: Nick Harbour\nThe eleventh Flare-On challenge is now over! This year proved to be a tough challenge for the over 5,300 players, with only 275 completing all 10 stages. We had a blast making this contest and are happy to see it continue to be a world-wide phenomenon. Those that finished all stages this year may be eligible to receive this elite desk trophy to the envy of your coworkers and family.\nWe would like to thank the challenge authors individually for their great puzzles and solutions:\nfrog - Nick Harbour (@nickharbour)\nchecksum - Chuong Dong (@cPeterr)\naray - Jakub Jozwiak\nFLARE Meme Maker 3000 - Moritz Raabe (@m_r_tz)\nsshd - Christopher Gardner (@t00manybananas)\nbloke2 - Dave Riley (@6502_ftw)\nfullspeed - Sam Kim\nClearly Fake - Blas Kojusner (@bkojusner)\nserpentine - Mustafa Nasser (@d35ha)\nCATBERT Ransomware - Mark Lechtik (@_marklech_)\nThis year’s challenge hosted 5,324 registered users, with 3,066 of them solving at least one stage. The difficulty curve ended up smoother than last year’s, with a nice progression of people falling off at stages 5, 7, and 9. Coincidentally, based on finisher feedback those were also the consensus favorite challenges this year. Does that mean we should up the difficulty next time?\nLast year Germany was far out ahead of the leaderboard with 19 finishers to 2nd place Singapore’s 15. This year Vietnam takes the lead with 21 finishers and the USA comes in second with 20.\nAll the binaries from this year’s challenge are now posted on the\nFlare-On website\n. Here are the solutions written by each challenge author:\nSOLUTION #1\nSOLUTION #2\nSOLUTION #3\nSOLUTION #4\nSOLUTION #5\nSOLUTION #6\nSOLUTION #7\nSOLUTION #8\nSOLUTION #9\nSOLUTION #10\nPosted in\nThreat Intelligence\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nBy Mandiant  • 25-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\n(In)tuned to Takeovers: Abusing Intune Permissions for Lateral Movement and Privilege Escalation in Entra ID Native Environments\nBy Mandiant  • 7-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                                      "recursive_crawls": [
                                        {
                                          "url": "https://cloud.google.com/blog/topics/threat-intelligence/ai-enhancing-your-adversarial-emulation",
                                          "text": "AI Enhancing Your Adversarial Emulation | Google Cloud Blog\nJump to Content\nCloud\nBlog\nContact sales\nGet started for free\nCloud\nBlog\nSolutions & technology\nAI & Machine Learning\nAPI Management\nApplication Development\nApplication Modernization\nChrome Enterprise\nCompute\nContainers & Kubernetes\nData Analytics\nDatabases\nDevOps & SRE\nMaps & Geospatial\nSecurity\nSecurity & Identity\nThreat Intelligence\nInfrastructure\nInfrastructure Modernization\nNetworking\nProductivity & Collaboration\nSAP on Google Cloud\nStorage & Data Transfer\nSustainability\nEcosystem\nIT Leaders\nIndustries\nFinancial Services\nHealthcare & Life Sciences\nManufacturing\nMedia & Entertainment\nPublic Sector\nRetail\nSupply Chain\nTelecommunications\nPartners\nStartups & SMB\nTraining & Certifications\nInside Google Cloud\nGoogle Cloud Next & Events\nGoogle Maps Platform\nGoogle Workspace\nDevelopers & Practitioners\nTransform with Google Cloud\nContact sales\nGet started for free\nThreat Intelligence\nPirates in the Data Sea: AI Enhancing Your Adversarial Emulation\nNovember 14, 2024\nMandiant\nWritten by: Matthijs Gielen, Jay Christiansen\nBackground\nNew solutions, old problems. Artificial intelligence (AI) and large language models (LLMs) are here to signal a new day in the cybersecurity world, but what does that mean for us—the attackers and defenders—and our battle to improve security through all the noise?\nData is everywhere. For most organizations, the access to security data is no longer the primary issue. Rather, it is the vast quantities of it, the noise in it, and the disjointed and spread-out nature of it. Understanding and making sense of it—THAT is the real challenge.\nWhen we conduct adversarial emulation (\nred team\n) engagements, making sense of all the network, user, and domain data available to us is how we find the path forward. From a defensive perspective, efficiently finding the sharpest and most dangerous needles in the haystack—for example, easily accessible credentials on fileshares—is how we prioritize, improve, and defend.\nHow do you make sense of this vast amount of structured and unstructured data, and give yourself the advantage?\nData permeates the modern organization. This data can be challenging to parse, process, and understand from a security implication perspective, but AI might just change all that.\nThis blog post will focus on a number of case studies where we obtained data during our complex adversarial emulation engagements with our global clients, and how we innovated using AI and LLM systems to process this into structured data that could be used to better defend organizations. We will showcase the lessons learned and key takeaways for all organizations and highlight other problems that can be solved with this approach for both red and blue teams.\nApproach\nData parsing and understanding is one of the biggest early benefits of AI. We have seen many situations where AI can help process data at a fast rate. Throughout this post, we use an LLM to process unstructured data, meaning that the data did not have a structure or format that we knew about before parsing the data.\nIf you want to try these examples out yourself, please make sure you use either a local model, or you have permission to send the data to an external service.\nGetting Structured Data Out of an LLM\nStep one is to get the data into a format we can use. If you ever used an LLM, you will have noticed it will output as a story or prose text, especially if you use chat-based versions. For a lot of use cases, this is fine; however, we want to analyze the data and get structured data. Thus, the first problem we have to solve is to get the LLM to output the data in a format we can specify. The simple method is to ask the LLM to output the data in a machine readable format like JSON, XML, or CSV. However, you will quickly notice that you have to be quite specific with the data format, and the LLM can easily output data in another format, ignoring your instructions.\nLuckily for us, other people have encountered this problem and have solved it with something called Guardrails. One of the projects we have found is called\nguardrails-ai\n. It is a Python library that allows you to create guardrails—specific requirements—for a model based on Pydantic.\nTo illustrate, take a simple Python class from the documentation to validate a pet from the output of the LLM:\nfrom pydantic import BaseModel, Field\r\n\r\nclass Pet(BaseModel):\r\n    pet_type: str = Field(description=\"Species of pet\")\r\n    name: str = Field(description=\"a unique pet name\")\nYou can use the next code from the Guardrails documentation to process the output of the LLM into a structured object:\nfrom guardrails import Guard\r\nimport openai\r\n\r\nprompt = \"\"\"\r\n    What kind of pet should I get and what should I name it?\r\n\r\n    ${gr.complete_json_suffix_v2}\r\n\"\"\"\r\nguard = Guard.from_pydantic(output_class=Pet, prompt=prompt)\r\n\r\nraw_output, validated_output, *rest = guard(\r\n    llm_api=openai.completions.create,\r\n    engine=\"gpt-3.5-turbo-instruct\"\r\n)\r\n\r\nprint(validated_output)\nIf we look at what this library generates underwater for this prompt, we see that it adds a structured object part with the instructions for the LLM to output data in a specific way. This streamlines the way you can get structured data from an LLM.\nFigure 1: The generated prompt from the Pydantic model\nFor the next use case, we will show the Pydantic models we've created to process the output.\nRed Team Use Cases\nThe next sections contain some use cases where we can use an LLM to get structured data out of data obtained. The use cases are divided into three categories of the attack lifecycle:\nInitial Reconnaissance\nEscalate Privileges\nInternal Reconnaissance\nFigure 2: Attack lifecycle\nInitial Reconnaissance\nOpen Source Intelligence (OSINT) is an important part of red teaming. It includes gathering data about the target organization from news articles, social media, and corporate reports.\nThis information can then be used in other red team phases such as during phishing. For defenders, it helps them understand which parts of their organization are exposed to the internet, anticipating a possible future attack. In the next use case, we talk about processing social media information to process roles and extract useful information.\nUse Case 1: Social Media Job Functions Information\nDuring OSINT, we often try to get information from employees about their function in their company. This helps with performing phishing attacks, as we do not want to target IT professionals, especially those that work in cybersecurity.\nSocial media sites allow their users to write about their job titles in a free format. This means that the information is unstructured and can be written in any language and any format.\nWe can try to extract the information from the title with simple matches; however, because the users can fill in anything and in any language, this problem can be better solved with an LLM.\nData Model\nFirst, we create a Pydantic model for the Guardrail:\nclass RoleOutput(BaseModel):\r\n    role: str = Field(description=\"Role being analyzed\")\r\n    it: bool = Field(description=\"The role is related to IT\")\r\n    cybersecurity: bool = Field(description=\"The role is related to \r\nCyberSecurity\")\r\n    experience_level: str = Field(\r\n        description=\"Experience level of the role.\",\r\n    )\nThis model has two Boolean options if the role is IT or cybersecurity related. Additionally, we would like to know the experience level of the role.\nPrompt\nNext, let's create a prompt to instruct the LLM to extract the requested information from the role. This prompt is quite simple and just asks the LLM to fill in the data.\nGiven the following role, answer the following questions. \r\nIf the answer doesn't exist in the role, enter ``.\r\n\r\n${role}\r\n\r\n${gr.complete_xml_suffix_v2}\nThe two last lines are placeholders used by guardrails-ai.\nResults\nTo test the models, we have scraped the titles that employees use on social media. This dataset contained the titles that the employees used and contained 235 entries.\nFor testing, we used the gemini-1.0-pro model.\nGemini\nmanaged to parse 232 entries. The results are shown in Table 1.\nNot IT\nIT\nCybersecurity\nGemini\n183\n49\n5\nManual evaluation\nby a red team operator\n185\n47\n5\nFalse positive\n1\n3\n0\nTable 1: Results of Gemini parsing 232 job title entries\nIn the end, Gemini processed the roles quite on par with a human. Most of the false positives were questionable because it is not very clear if the role was actually IT related. The experience level did not perform well, as the model deemed the experience level as \"unknown\" or \"none\" for most of the entries. To resolve this issue, the field was changed so that the experience level should be a number from 1 to 10. After running the analysis again, this yielded better results for the experience level. The lowest experience levels (1–4) contained function titles like \"intern,\" \"specialist,\" or \"assistant.\" This usually indicated that the person had been employed at that role for a shorter period of time. The updated data model is shown as follows:\nclass RoleOutput(BaseModel):\r\n    role: str = Field(description=\"Role being analyzed\")\r\n    it: bool = Field(description=\"The role is related to IT\")\r\n    cybersecurity: bool = Field(description=\"The role is related to \r\nCyberSecurity\")\r\n    experience_level: int = Field(\r\n        description=\"Estimate of the experience level of the role on \r\na scale of 1-10. Where 1 is low experience and 10 is high.\",\r\n    )\nThis approach helped us to sort through a large dataset of phishing targets by identifying employees that did not have IT and cybersecurity roles, and sorting them by experience level. This can speed up target selection for large organizations and may allow us to better emulate attackers by changing the prompts or selection criteria. To defend against this, data analysis is more difficult. In theory, you can instruct all your employees to include \"Cybersecurity\" in their role, but that does not scale well or solve the underlying phishing problem. The best approach with regards to phishing is, in our experience, to invest into phishing resistant multifactor authentication (MFA) and application allowlisting. If applied well, these solutions can mitigate phishing attacks as an initial access vector.\nEscalate Privileges\nOnce attackers establish a foothold into an organization, one of their first acts is often to improve their level of access or control through privilege escalation. There are quite a few methods that can be used for this. It comes in a local system-based variety as well as wider domain-wide types, with some based on exploits or misconfigurations, and others based on finding sensitive information when searching through files.\nOur focus will be on the final aspect, which aligns with our challenge of identifying the desired information within the vast amount of data, like finding a needle in a haystack.\nUse Case 2: Credentials in Files\nAfter gaining initial access to the target network, one of the more common enumeration methods employed by attackers is to perform share enumeration and try to locate interesting files. There are quite a few tools that can do this, such as\nSnaffler\n.\nAfter you identify files that potentially contain credentials, you can go through them manually to find useful ones. However, if you do this in a large organization, there is a chance that you will have hundreds to thousands of hits. In that case, there are some tools that can help with finding and classifying credentials like\nTruffleHog\nand\nNosey Parker\n. Additionally, the Python library\ndetect-secrets\ncan help with this task.\nMost of these tools look for common patterns or file types that they understand. To cover unknown file types or credentials in emails or other formats, it might instead be valuable to use an LLM to analyze the files to find any unknown or unrecognized formats.\nTechnically, we can just run all tools and use a linear regression model to combine the results into one.\nAn anonymized example of a file with a password that we encountered during our tests is shown as follows:\n@Echo Off\r\nNet Use /Del * /Yes\r\nSet /p Path=<\"path.txt\"\r\nNet Use %Path% Welcome01@ /User:CHAOS.LOCAL\\WorkstationAdmin\r\nIf Not Exist \"C:\\Data\" MKDIR \"C:\\Data\"\r\nCopy %Path%\\. C:\\Data\r\nTimeout 02\nData Model\nWe used the following Python classes to instruct Gemini to retrieve credentials with an optional domain. One file can contain multiple credentials, so we use a list of credentials to instruct Gemini to optionally retrieve multiple credentials from one file.\nclass Credential(BaseModel):\r\n    password: str = Field(description=\"Potential password of an account\")\r\n    username: str = Field(description=\"Potential username of an account\")\r\n    domain: Optional[str] = Field(\r\n        description=\"Optional domain of an account\", default=\"\"\r\n    )\r\n\r\n\r\nclass ListOfCredentials(BaseModel):\r\n    credentials: list[Credential] = []\nPrompt\nIn the prompt, we give some examples of what kind of systems we are looking for, and output into JSON once again:\nGiven the following file, check if there are credentials in the file. \r\nOnly include results if there is at least one username and password. \r\nIf the domain doesn't exist in the file, enter `` as a default value.\r\n\r\n${file}\r\n\r\n${gr.complete_xml_suffix_v2}\nResults\nWe tested on 600 files, where 304 contain credentials and 296 do not. Testing occurred with the gemini-1.5 model. Each file took about five seconds to process.\nTo compare results with other tools, we also tested Nosey Parker and TruffleHog. Both NoseyParker and Truffle Hog are made to find credentials in a structured way in files, including repositories. Their use case is usually for known file formats and randomly structured files.\nThe results are summarized in Table 2.\nTool\nTrue Negative\nFalse Positive\nFalse Negative\nTrue Positive\nNosey Parker\n284 (47%)\n12 (2%)\n136 (23%)\n168 (28%)\nTruffleHog\n294 (49%)\n2 (<1%)\n180 (30%)\n124 (21%)\nGemini\n278 (46%)\n18 (3%)\n23 (4%)\n281 (47%)\nTable 2: Results of testing for credentials in files, where 304 contain them and 296 do not\nIn this context, the definitions of true negative, false positive, false negative, and true positive are as follows:\nTrue Negative\n: A file does not contain any credentials, and the tool correctly indicates that there are no credentials.\nFalse Positive\n: The tool incorrectly indicates that a file contains credentials when it does not.\nFalse Negative\n: The tool incorrectly indicates that a file does not contain any credentials when it does.\nTrue Positive\n: The tool correctly indicates that a file contains credentials.\nIn conclusion, Gemini finds the most files with credentials, at a cost of a slightly higher false positive rate. TruffleHog has the lowest false positive rate, but also finds the least amount of true positives. This is to be expected, as a higher true positive rate usually is accompanied by a higher false positive rate. The current dataset has almost an equal number of files with and without credentials—in real-world scenarios this ratio can differ wildly, which means that the false positive rate is still important even though the percentages are quite close.\nTo optimize this approach, you can use all three tools, combine the output signals to a single signal, and then sort the potential files based on this combined signal.\nDefenders can, and should, use the same techniques previously described to enumerate the internal file shares and remove or limit access to files that contain credentials. Make sure to check what file shares each server and workstation exposes to the network, because in some cases file shares are exposed accidentally or were forgotten about.\nInternal Reconnaissance\nWhen attackers have gained a better position in the network, the next step in their playbooks is understanding the domain in which they have landed so they can construct a path to their ultimate goal. This could be full domain control or access to specific systems or users, depending on the threat actor's mission. From a red team perspective, we need to be able to emulate this. From a defender's perspective, we need to find these paths before the attackers exploit them.\nThe main tool that red teamers use to analyze Active Directory is\nBloodHound\n, which uses a graph database to find paths in the Active Directory. BloodHound is executed in two steps. First, an ingester retrieves the data from the target Active Directory. Second, this data is ingested and analyzed by BloodHound to find attack paths.\nSome tools that can gather data to be used in BloodHound are:\nSharphound\nBloodhound.py\nRusthound\nAdexplorer\nBofhound\nSoaphound\nThese tools gather data from the Active Directory and other systems and output it in a format that BloodHound can read. In theory, if we have all the information about the network in the graph, then we can just query the graph to figure out how to achieve our objective.\nTo improve the data in BloodHound, we have thought of additional use cases. Use Case 3 is about finding high-value systems. Discovering more hidden edges in BloodHound is part of Use Case 4 and Use Case 5.\nUse Case 3: High-Value Target Detection in Active Directory\nBy default, BloodHound deems some groups and computers as high value. One of the main activities in internal reconnaissance is figuring out which systems in the client's network are high-value targets. Some examples of systems that we are interested in, and that can lead to domain compromise, are:\nBackup systems\nSCCM\nCertificate services\nExchange\nWSUS systems\nThere are many ways to indicate which servers are used for a certain function, and it depends on how the IT administrators have configured it in their domain. There are some fields that may contain data in various forms to indicate what the system is used for. This is a prime example of unstructured data that might be analyzable with an LLM.\nThe following fields in the Active Directory might contain the relevant information:\nName\nSamaccountname\nDescription\nDistinguishedname\nSPNs\nData Model\nIn the end, we would like to have a list of names of the systems the LLM has deemed high value. During development, we noticed that LLM results improved dramatically if you asked it to specify a reason. Thus, our Pydantic model looks like this:\nclass HighValueSystem(BaseModel):\r\n    name: str = Field(description=\"Name of this system\")\r\n    reason: str = Field(description=\"Reason why this system is \r\nhigh value\", default=\"\")\r\n\r\nclass HighValueResults(BaseModel):\r\n    systems: list[HighValueSystem] = Field(description=\"high value \r\nsystems\", default=[])\nPrompt\nIn the prompt, we give some examples of what kind of systems we are looking for:\nGiven the data, identify which systems are high value targets, \r\nlook for: sccm servers, jump systems, certificate systems, backup \r\nsystems and other valuable systems. Use the first (name) field to \r\nidentify the systems.\nResults\nWe tested this prompt on a dataset of 400 systems and executed it five times. All systems were sent in one query to the model. To accommodate this, we used the gemini-1.5 model because it has a huge context window. Here are some examples of reasons Gemini provided, and what we think the reason was based off:\nDomain controller\n: Looks like this was based on the \"OU=Domain Controllers\" distinguishedname field of BloodHound\nJumpbox\n: Based on the \"OU=Jumpboxes,OU=Bastion Servers\" distinguishedname\nLansweeper\n: Based on the description field of the computer\nBackup Server\n: Based on \"OU=Backup Servers\" distinguishedname\nSome of the high-value targets are valid yet already known, like domain controllers. Others are good finds, like the jumpbox and backup servers. This method can process system names in other languages and more verbose descriptions of systems to determine systems that may be high value. Additionally, this method can be adapted to allow for a more specific query—for example, that might suit a different client environment:\nGiven the data, identify which systems are related to \r\nSWIFT. Use the first (name) field to identify the systems.\nIn this case, the LLM will look for SWIFT servers and may save you some time searching for it manually. This approach can potentially be even better when you combine this data with internal documentation to give you results, even if the Active Directory information is lacking any information about the usage of the system.\nFor defenders, there are some ways to deal with this situation:\nLimit the amount of information in the Active Directory and put the system descriptions in your documentation instead of within the Active Directory\nLimit the amount of information a regular user can retrieve from the Active Directory\nMonitor LDAP queries to see if a large amount of data is being retrieved from LDAP\nUse Case 4: User Clustering\nAfter gaining an initial strong position, and understanding the systems in the network, attackers will often need to find the right users to compromise to gain further privileges in the domain. For defenders, legacy user accounts or administrators with too many rights is a common security issue.\nAdministrators often have multiple user accounts: one for normal operations like reading email and using it on their workstations, and one or multiple administrator accounts. This separation is done to make it harder for attackers to compromise the administrator account.\nThere are some common flaws in the implementations that sometimes make it possible to bypass these separations. Most of the methods require the attacker to cluster the users together to see which accounts belong to the same employee. In many cases, this can be done by inspecting the Active Directory objects and searching for patterns in the display name, description, or other fields. To automate this, we tried to find these patterns with Gemini.\nData Model\nFor this use case, we would like to have the account's names that Gemini clusters together. During initial testing, the results were quite random. However, after adding a \"reason\" field, the results improved dramatically. So we used the next Pydantic model:\nclass User(BaseModel):\r\n    accounts: list[Account] = Field(\r\n        description=\"accounts that probably belongs \r\nto this user\", default=[]\r\n    )\r\n    reason: str = Field(\r\n        description=\"Reason why these accounts belong \r\nto this user\", default=\"\"\r\n    )\r\n\r\n\r\nclass UserAccountResults(BaseModel):\r\n    users: list[User] = Field(description=\"users with multiple \r\naccounts\", default=[])\nPrompt\nIn the prompt, we give some examples of what kind of systems we are looking for:\nGiven the data, cluster the accounts that belong to a single person \r\nby checking for similarities in the name, displayname and sam. \r\nOnly include results that are likely to be the same user. Only include \r\nresults when there is a user with multiple accounts. It is possible \r\nthat a user has more than two accounts. Please specify a reason \r\nwhy those accounts belong to the same user. Use the first (name) \r\nfield to identify the accounts.\nResults\nThe test dataset had about 900 users. We manually determined that some users have two to four accounts with various permissions. Some of these accounts had the same pattern like \"user@test.local\" and \"adm-user@test.local.\" However, other accounts had patterns where the admin account was based on the first couple of letters. For example, their main account had the pattern matthijs.gielen@test.local, and the admin account was named: adm-magi@test.local. To keep track of those accounts, the description of the admin account contained some text similar to \"admin account of Matthijs Gielen.\"\nWith this prompt, Gemini managed to cluster 50 groups of accounts in our dataset. After manual verification, some of the results were discarded because they only contained one account in the cluster. This resulted in 43 correct clusters of accounts. Manually, we found the same correlation; however, where Gemini managed to output this information in a couple of minutes, manually this took quite a bit longer to analyze and correlate all accounts. This information was used in preparation for further attacks, as shown in the next use case.\nUse Case 5: Correlation Between Users and Their Machines\nKnowing which users to target or defend is often not enough. We also need to find them within the network in order to compromise them. Domain administrators are (usually) physical people; they need somewhere to type in their commands and perform administrative actions. This means that we need to correlate which domain administrator is working from which workstation. This is called session information, and BloodHound uses this information in an edge called \"HasSession.\"\nIn the past, it was possible to get all session information with a regular user during red teaming.\nUsing the technique in Use Case 4, we can correlate the different user accounts that one employee may have. The next step is to figure out which workstation belongs to that employee. Then we can target that workstation, and from there, hopefully recover the passwords of their administrator accounts.\nIn this case, employees have corporate laptops, and the company needs to keep track of which laptop belongs to which employee. Often this information is stored in one of the fields of the computer object in the Active Directory. However, there are many ways to do this, and using Gemini to parse the unstructured data is one such example.\nData Model\nThis model is quite simple, we just want to correlate machines to their users and have Gemini give us a reason why—to improve the output of the model. Because we will send all users and all computers at once, we will need a list of results.\nclass UserComputerCorrelation(BaseModel):\r\n    user: str = Field(description=\"name of the user\")\r\n    computer: str = Field(description=\"name of the computer\")\r\n    reason: str = Field(\r\n        description=\"Reason why these accounts belong to this user\", \r\ndefault=\"\"\r\n    )\r\n\r\nclass CorrelationResults(BaseModel):\r\n    results: list[UserComputerCorrelation] = Field(\r\n        description=\"users and computers that correlate\", default=[]\r\n    )\nPrompt\nIn the prompt, we give some examples of what kind of systems we are looking for:\nGiven the two data sets, find the computer that correlates \r\nto a user by checking for similarities in the name, displayname \r\nand sam. Only include results that are likely to correspond. \r\nPlease specify a reason why that user and computer correlates. \r\nUse the first (name) field to identify the users and computers.\nResults\nThe dataset used contains around 900 users and 400 computers. During the assignment, we determined that the administrators correlated users and their machines via the description field of the computer, which was sort of equal to the display name of the user. Gemini correctly picked up this connection, correctly correlating around 120 users to their respective laptops (Figure 3).\nFigure 3: Connections between user and laptop as correlated by Gemini\nGemini helped us to select an appropriate workstation, which enabled us to perform lateral movement to a workstation and obtain the password of an administrator, getting us closer to our goal.\nTo defend against these threats, it can be valuable to run tools like BloodHound in the network. As discussed, BloodHound might not find all the \"hidden\" edges in your network, but you can add these yourself to the graph. This will allow you to find more Active Directory-based attack paths that are possible in your network and mitigate these before an attacker has an opportunity to exploit those attack paths.\nConclusion\nIn this blog post, we looked at processing red team data using LLMs to aid in adversarial emulation or improving defenses. These use cases were related to processing human-generated, unstructured data. Table 3 summarizes the results.\nUse Case\nAccuracy of the Results\nUsefulness\nRoles\nHigh\n: There were a few false positives that were in the gray area.\nHigh\n: Especially when going through a large list of roles of users, this approach will provide fairly fast results.\nCredentials in files\nHigh\n: Found more credentials than comparable tools. More testing should look into the false-positive rate in real scenarios.\nMedium\n: This approach finds a lot more results; however, processing it with Gemini is a lot slower (five seconds per file) than many other alternatives.\nHigh-value targets\nMedium\n: Not all results were new, nor were all high-value targets.\nMedium\n: Some of the results were useful; however, all of them still require manual verification.\nAccount clustering\nHigh\n: After taking into account the clusters with one account, the other ones were well clustered.\nHigh\n: Clustering users is most of the time a tedious process to do manually. It gives fairly reliable results if you filter out the results with only one account.\nComputer correlation\nHigh\n: All results were correctly correlated users to their computers.\nHigh\n: This approach produces accurate results potentially providing insights into extra possible attack paths.\nTable 3: The results of our experiments of data processing with Gemini\nAs the results show, using an LLM like Gemini can help in converting this type of data into structured data to aid attackers and defenders. However, keep in mind that LLMs are not a silver bullet and have limitations. For example, they can sometimes produce false positives or be slow to process large amounts of data.\nThere are quite a few use cases we have not covered in this blog post. Some other examples where you can use this approach are:\nCorrelating user groups to administrator privileges on workstations and servers\nSummarizing internal website content or documentation to search for target systems\nIngesting documentation to generate password candidates for cracking passwords\nThe Future\nThis was just an initial step that we on the Advanced Capabilities team on the Mandiant Red Team have explored so far when using LLMs for adversarial emulation and defense. For next steps, we know that the models and prompts can be improved by testing variations in the prompts, and other data sources can be investigated to see if Gemini can help analyze them. We are also looking at using linear regression models as well as clustering and pathfinding algorithms to enable cybersecurity practitioners to quickly evaluate attack paths that may exist in a network.\nPosted in\nThreat Intelligence\nRelated articles\nThreat Intelligence\nEmpowering Gemini for Malware Analysis with Code Interpreter and Google Threat Intelligence\nBy Bernardo Quintero • 6-minute read\nThreat Intelligence\nEmerging Threats: Cybersecurity Forecast 2025\nBy Adam Greenberg • 3-minute read\nThreat Intelligence\nFlare-On 11 Challenge Solutions\nBy Mandiant  • 2-minute read\nThreat Intelligence\n(In)tuned to Takeovers: Abusing Intune Permissions for Lateral Movement and Privilege Escalation in Entra ID Native Environments\nBy Mandiant  • 7-minute read\nFooter Links\nFollow us\nGoogle Cloud\nGoogle Cloud Products\nPrivacy\nTerms\nCookies management controls\nHelp\nLanguage\n‪English‬\n‪Deutsch‬\n‪Français‬\n‪한국어‬\n‪日本語‬",
                                          "recursive_crawls": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}